
CPU ATmega328P.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00001540  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014cc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000007a4  00800100  00800100  00001540  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001540  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001570  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  000015b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016a1  00000000  00000000  000016c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b95  00000000  00000000  00002d69  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c1c  00000000  00000000  000038fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000274  00000000  00000000  0000451c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000615  00000000  00000000  00004790  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000095f  00000000  00000000  00004da5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00005704  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__ctors_end>
       4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
       8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
       c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      10:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      14:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      18:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      1c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      20:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      24:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      28:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      2c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      30:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      34:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      38:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      3c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      40:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      44:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      48:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      4c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      50:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      54:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      58:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      5c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      60:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      64:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      68:	28 07       	cpc	r18, r24
      6a:	cb 02       	muls	r28, r27
      6c:	e2 02       	muls	r30, r18
      6e:	00 03       	mulsu	r16, r16
      70:	15 03       	mulsu	r17, r21
      72:	2a 03       	fmul	r18, r18
      74:	3f 03       	fmul	r19, r23
      76:	54 03       	mulsu	r21, r20
      78:	63 03       	mulsu	r22, r19
      7a:	88 03       	fmulsu	r16, r16
      7c:	ad 03       	fmulsu	r18, r21
      7e:	d2 03       	fmuls	r21, r18
      80:	fd 03       	fmulsu	r23, r21
      82:	28 04       	cpc	r2, r8
      84:	53 04       	cpc	r5, r3
      86:	78 04       	cpc	r7, r8
      88:	9d 04       	cpc	r9, r13
      8a:	c8 04       	cpc	r12, r8
      8c:	f3 04       	cpc	r15, r3
      8e:	14 05       	cpc	r17, r4
      90:	35 05       	cpc	r19, r5
      92:	56 05       	cpc	r21, r6
      94:	7d 05       	cpc	r23, r13
      96:	86 05       	cpc	r24, r6
      98:	93 05       	cpc	r25, r3
      9a:	a0 05       	cpc	r26, r0
      9c:	ad 05       	cpc	r26, r13
      9e:	bc 05       	cpc	r27, r12
      a0:	cb 05       	cpc	r28, r11
      a2:	d8 05       	cpc	r29, r8
      a4:	e9 05       	cpc	r30, r9
      a6:	f0 05       	cpc	r31, r0
      a8:	fc 05       	cpc	r31, r12
      aa:	0d 06       	cpc	r0, r29
      ac:	1e 06       	cpc	r1, r30
      ae:	35 06       	cpc	r3, r21
      b0:	4c 06       	cpc	r4, r28
      b2:	52 06       	cpc	r5, r18
      b4:	58 06       	cpc	r5, r24
      b6:	88 06       	cpc	r8, r24
      b8:	bf 06       	cpc	r11, r31
      ba:	ef 06       	cpc	r14, r31

000000bc <__ctors_end>:
      bc:	11 24       	eor	r1, r1
      be:	1f be       	out	0x3f, r1	; 63
      c0:	cf ef       	ldi	r28, 0xFF	; 255
      c2:	d8 e0       	ldi	r29, 0x08	; 8
      c4:	de bf       	out	0x3e, r29	; 62
      c6:	cd bf       	out	0x3d, r28	; 61

000000c8 <__do_clear_bss>:
      c8:	28 e0       	ldi	r18, 0x08	; 8
      ca:	a0 e0       	ldi	r26, 0x00	; 0
      cc:	b1 e0       	ldi	r27, 0x01	; 1
      ce:	01 c0       	rjmp	.+2      	; 0xd2 <.do_clear_bss_start>

000000d0 <.do_clear_bss_loop>:
      d0:	1d 92       	st	X+, r1

000000d2 <.do_clear_bss_start>:
      d2:	a4 3a       	cpi	r26, 0xA4	; 164
      d4:	b2 07       	cpc	r27, r18
      d6:	e1 f7       	brne	.-8      	; 0xd0 <.do_clear_bss_loop>
      d8:	0e 94 7c 07 	call	0xef8	; 0xef8 <main>
      dc:	0c 94 64 0a 	jmp	0x14c8	; 0x14c8 <_exit>

000000e0 <__bad_interrupt>:
      e0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e4 <alu>:
********************************************************************************/
uint32_t alu(const uint16_t operation,
            const uint32_t a,
            const uint32_t b,
            uint8_t* sr)
{
      e4:	4f 92       	push	r4
      e6:	5f 92       	push	r5
      e8:	6f 92       	push	r6
      ea:	7f 92       	push	r7
      ec:	8f 92       	push	r8
      ee:	9f 92       	push	r9
      f0:	af 92       	push	r10
      f2:	bf 92       	push	r11
      f4:	ef 92       	push	r14
      f6:	ff 92       	push	r15
      f8:	0f 93       	push	r16
      fa:	1f 93       	push	r17
      fc:	cf 93       	push	r28
      fe:	df 93       	push	r29
     100:	4a 01       	movw	r8, r20
     102:	5b 01       	movw	r10, r22
     104:	e7 01       	movw	r28, r14
   uint64_t result = 0x00;
   *sr &= ~((1 << S) | (1 << N) | (1 << Z) | (1 << V) | (1 << C));
     106:	48 81       	ld	r20, Y
     108:	40 7e       	andi	r20, 0xE0	; 224
     10a:	f4 2e       	mov	r15, r20
     10c:	48 83       	st	Y, r20

   switch (operation)
     10e:	8d 30       	cpi	r24, 0x0D	; 13
     110:	91 05       	cpc	r25, r1
     112:	b9 f0       	breq	.+46     	; 0x142 <alu+0x5e>
     114:	30 f4       	brcc	.+12     	; 0x122 <alu+0x3e>
     116:	8b 30       	cpi	r24, 0x0B	; 11
     118:	91 05       	cpc	r25, r1
     11a:	49 f0       	breq	.+18     	; 0x12e <alu+0x4a>
     11c:	0c 97       	sbiw	r24, 0x0c	; 12
     11e:	61 f0       	breq	.+24     	; 0x138 <alu+0x54>
     120:	37 c0       	rjmp	.+110    	; 0x190 <alu+0xac>
     122:	80 31       	cpi	r24, 0x10	; 16
     124:	91 05       	cpc	r25, r1
     126:	91 f0       	breq	.+36     	; 0x14c <alu+0x68>
     128:	41 97       	sbiw	r24, 0x11	; 17
     12a:	a9 f0       	breq	.+42     	; 0x156 <alu+0x72>
     12c:	31 c0       	rjmp	.+98     	; 0x190 <alu+0xac>
   {
      case OR:
      {
         result = a | b; 
     12e:	08 29       	or	r16, r8
     130:	19 29       	or	r17, r9
     132:	2a 29       	or	r18, r10
     134:	3b 29       	or	r19, r11
         break;
     136:	30 c0       	rjmp	.+96     	; 0x198 <alu+0xb4>
      }
      case AND:
      {
         result = a & b;
     138:	08 21       	and	r16, r8
     13a:	19 21       	and	r17, r9
     13c:	2a 21       	and	r18, r10
     13e:	3b 21       	and	r19, r11
         break;
     140:	2b c0       	rjmp	.+86     	; 0x198 <alu+0xb4>
      }
      case XOR:
      {
         result = a ^ b;
     142:	08 25       	eor	r16, r8
     144:	19 25       	eor	r17, r9
     146:	2a 25       	eor	r18, r10
     148:	3b 25       	eor	r19, r11
         break;
     14a:	26 c0       	rjmp	.+76     	; 0x198 <alu+0xb4>
      }
      case ADD:
      {
         result = a + b;
     14c:	08 0d       	add	r16, r8
     14e:	19 1d       	adc	r17, r9
     150:	2a 1d       	adc	r18, r10
     152:	3b 1d       	adc	r19, r11
     154:	21 c0       	rjmp	.+66     	; 0x198 <alu+0xb4>
         }
         break;
      }
      case SUB:
      {
         result = a + (pow(2, 31) - b); 
     156:	c9 01       	movw	r24, r18
     158:	b8 01       	movw	r22, r16
     15a:	0e 94 a2 09 	call	0x1344	; 0x1344 <__floatunsisf>
     15e:	9b 01       	movw	r18, r22
     160:	ac 01       	movw	r20, r24
     162:	60 e0       	ldi	r22, 0x00	; 0
     164:	70 e0       	ldi	r23, 0x00	; 0
     166:	80 e0       	ldi	r24, 0x00	; 0
     168:	9f e4       	ldi	r25, 0x4F	; 79
     16a:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <__subsf3>
     16e:	2b 01       	movw	r4, r22
     170:	3c 01       	movw	r6, r24
     172:	c5 01       	movw	r24, r10
     174:	b4 01       	movw	r22, r8
     176:	0e 94 a2 09 	call	0x1344	; 0x1344 <__floatunsisf>
     17a:	a3 01       	movw	r20, r6
     17c:	92 01       	movw	r18, r4
     17e:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <__addsf3>
     182:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <__fixunssfdi>
     186:	02 2f       	mov	r16, r18
     188:	13 2f       	mov	r17, r19
     18a:	24 2f       	mov	r18, r20
     18c:	35 2f       	mov	r19, r21
     18e:	04 c0       	rjmp	.+8      	; 0x198 <alu+0xb4>
uint32_t alu(const uint16_t operation,
            const uint32_t a,
            const uint32_t b,
            uint8_t* sr)
{
   uint64_t result = 0x00;
     190:	00 e0       	ldi	r16, 0x00	; 0
     192:	10 e0       	ldi	r17, 0x00	; 0
     194:	20 e0       	ldi	r18, 0x00	; 0
     196:	30 e0       	ldi	r19, 0x00	; 0
         break;
      }
   }

   if (read(result, 31) == 1)         set(*sr, N);
   if ((uint32_t)(result) == 0)       set(*sr, Z);
     198:	c9 01       	movw	r24, r18
     19a:	b8 01       	movw	r22, r16
     19c:	01 2b       	or	r16, r17
     19e:	02 2b       	or	r16, r18
     1a0:	03 2b       	or	r16, r19
     1a2:	19 f4       	brne	.+6      	; 0x1aa <alu+0xc6>
     1a4:	2f 2d       	mov	r18, r15
     1a6:	24 60       	ori	r18, 0x04	; 4
     1a8:	28 83       	st	Y, r18
   if (read(result, 32) == 1)         set(*sr, C);
   if (read(*sr, N) != read(*sr, V)) set(*sr, S);
     1aa:	28 81       	ld	r18, Y
*       - reg: Reference to the register.
*       - bit: The bit to be read in the referenced register.
********************************************************************************/
static inline bool read(const uint32_t reg, const uint8_t bit)
{
   return (bool)(reg & (1 << bit));
     1ac:	23 fb       	bst	r18, 3
     1ae:	33 27       	eor	r19, r19
     1b0:	30 f9       	bld	r19, 0
     1b2:	21 fb       	bst	r18, 1
     1b4:	44 27       	eor	r20, r20
     1b6:	40 f9       	bld	r20, 0
     1b8:	43 17       	cp	r20, r19
     1ba:	11 f0       	breq	.+4      	; 0x1c0 <alu+0xdc>
     1bc:	20 61       	ori	r18, 0x10	; 16
     1be:	28 83       	st	Y, r18

   return (uint32_t)(result);
}
     1c0:	df 91       	pop	r29
     1c2:	cf 91       	pop	r28
     1c4:	1f 91       	pop	r17
     1c6:	0f 91       	pop	r16
     1c8:	ff 90       	pop	r15
     1ca:	ef 90       	pop	r14
     1cc:	bf 90       	pop	r11
     1ce:	af 90       	pop	r10
     1d0:	9f 90       	pop	r9
     1d2:	8f 90       	pop	r8
     1d4:	7f 90       	pop	r7
     1d6:	6f 90       	pop	r6
     1d8:	5f 90       	pop	r5
     1da:	4f 90       	pop	r4
     1dc:	08 95       	ret

000001de <control_unit_io_reset>:
}

static void control_unit_io_reset(void)
{
	
	DDRB = 0;
     1de:	14 b8       	out	0x04, r1	; 4
	DDRC = 0;
     1e0:	17 b8       	out	0x07, r1	; 7
	DDRD = 0;
     1e2:	1a b8       	out	0x0a, r1	; 10
	
    PORTB = 0;
     1e4:	15 b8       	out	0x05, r1	; 5
	PORTC = 0;
     1e6:	18 b8       	out	0x08, r1	; 8
	PORTD = 0;
     1e8:	1b b8       	out	0x0b, r1	; 11
     1ea:	08 95       	ret

000001ec <control_unit_io_update>:
	return;
}
static void control_unit_io_update(void)
{
     1ec:	4f 92       	push	r4
     1ee:	5f 92       	push	r5
     1f0:	6f 92       	push	r6
     1f2:	7f 92       	push	r7
     1f4:	8f 92       	push	r8
     1f6:	9f 92       	push	r9
     1f8:	af 92       	push	r10
     1fa:	bf 92       	push	r11
     1fc:	cf 92       	push	r12
     1fe:	df 92       	push	r13
     200:	ef 92       	push	r14
     202:	ff 92       	push	r15
	const uint32_t ddra = data_memory_read(DDRA);
     204:	80 e0       	ldi	r24, 0x00	; 0
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	0e 94 68 07 	call	0xed0	; 0xed0 <data_memory_read>
     20c:	4b 01       	movw	r8, r22
     20e:	5c 01       	movw	r10, r24
	const uint32_t porta = data_memory_read(PORTA);
     210:	81 e0       	ldi	r24, 0x01	; 1
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	0e 94 68 07 	call	0xed0	; 0xed0 <data_memory_read>
     218:	6b 01       	movw	r12, r22
     21a:	7c 01       	movw	r14, r24
	const uint32_t pina = data_memory_read(PIND) | (data_memory_read(PINB) << 8) 
     21c:	89 b1       	in	r24, 0x09	; 9
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	0e 94 68 07 	call	0xed0	; 0xed0 <data_memory_read>
     224:	2b 01       	movw	r4, r22
     226:	3c 01       	movw	r6, r24
     228:	83 b1       	in	r24, 0x03	; 3
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	0e 94 68 07 	call	0xed0	; 0xed0 <data_memory_read>
     230:	44 27       	eor	r20, r20
     232:	56 2f       	mov	r21, r22
     234:	67 2f       	mov	r22, r23
     236:	78 2f       	mov	r23, r24
     238:	44 2a       	or	r4, r20
     23a:	55 2a       	or	r5, r21
     23c:	66 2a       	or	r6, r22
     23e:	77 2a       	or	r7, r23
	                   | (data_memory_read(PINC) << 16);
     240:	86 b1       	in	r24, 0x06	; 6
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	0e 94 68 07 	call	0xed0	; 0xed0 <data_memory_read>
     248:	55 27       	eor	r21, r21
     24a:	44 27       	eor	r20, r20
}
static void control_unit_io_update(void)
{
	const uint32_t ddra = data_memory_read(DDRA);
	const uint32_t porta = data_memory_read(PORTA);
	const uint32_t pina = data_memory_read(PIND) | (data_memory_read(PINB) << 8) 
     24c:	44 29       	or	r20, r4
     24e:	55 29       	or	r21, r5
     250:	66 29       	or	r22, r6
     252:	77 29       	or	r23, r7
	                   | (data_memory_read(PINC) << 16);
	
	data_memory_write(PINA, pina);
     254:	82 e0       	ldi	r24, 0x02	; 2
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	0e 94 53 07 	call	0xea6	; 0xea6 <data_memory_write>
	
	DDRB = (uint8_t)(ddra >> 8);
     25c:	bb 27       	eor	r27, r27
     25e:	ab 2d       	mov	r26, r11
     260:	9a 2d       	mov	r25, r10
     262:	89 2d       	mov	r24, r9
     264:	84 b9       	out	0x04, r24	; 4
	DDRC = (uint8_t)(ddra >> 16);
     266:	c5 01       	movw	r24, r10
     268:	aa 27       	eor	r26, r26
     26a:	bb 27       	eor	r27, r27
     26c:	87 b9       	out	0x07, r24	; 7
	DDRD = (uint8_t)(ddra);
     26e:	8a b8       	out	0x0a, r8	; 10
	
	PORTB = (uint8_t)(porta >> 8);
     270:	bb 27       	eor	r27, r27
     272:	af 2d       	mov	r26, r15
     274:	9e 2d       	mov	r25, r14
     276:	8d 2d       	mov	r24, r13
     278:	85 b9       	out	0x05, r24	; 5
	PORTC = (uint8_t)(porta >> 16);
     27a:	c7 01       	movw	r24, r14
     27c:	aa 27       	eor	r26, r26
     27e:	bb 27       	eor	r27, r27
     280:	88 b9       	out	0x08, r24	; 8
	PORTD = (uint8_t)(porta);
     282:	cb b8       	out	0x0b, r12	; 11
	return;
	
}
     284:	ff 90       	pop	r15
     286:	ef 90       	pop	r14
     288:	df 90       	pop	r13
     28a:	cf 90       	pop	r12
     28c:	bf 90       	pop	r11
     28e:	af 90       	pop	r10
     290:	9f 90       	pop	r9
     292:	8f 90       	pop	r8
     294:	7f 90       	pop	r7
     296:	6f 90       	pop	r6
     298:	5f 90       	pop	r5
     29a:	4f 90       	pop	r4
     29c:	08 95       	ret

0000029e <monitor_interrupts>:
	}
	return;
}

static void monitor_interrupts(void)
{
     29e:	8f 92       	push	r8
     2a0:	9f 92       	push	r9
     2a2:	af 92       	push	r10
     2a4:	bf 92       	push	r11
     2a6:	cf 92       	push	r12
     2a8:	df 92       	push	r13
     2aa:	ef 92       	push	r14
     2ac:	ff 92       	push	r15
     2ae:	0f 93       	push	r16
     2b0:	1f 93       	push	r17
*                 interrupt flag PCIF0 in the PCIFR register i set to generate
*                 an interrupt request (IRQ).
********************************************************************************/
static inline void monitor_pcint(void)
{
    const uint32_t pina_current = data_memory_read(PINA);
     2b2:	82 e0       	ldi	r24, 0x02	; 2
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	0e 94 68 07 	call	0xed0	; 0xed0 <data_memory_read>
     2ba:	6b 01       	movw	r12, r22
     2bc:	7c 01       	movw	r14, r24
    const uint32_t pcmsk = data_memory_read(PCMSKA);
     2be:	85 e0       	ldi	r24, 0x05	; 5
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	0e 94 68 07 	call	0xed0	; 0xed0 <data_memory_read>
     2c6:	8b 01       	movw	r16, r22
     2c8:	9c 01       	movw	r18, r24

    for (uint32_t i = 0; i < CPU_REGISTER_DATA_WIDTH; ++i)
     2ca:	40 e0       	ldi	r20, 0x00	; 0
     2cc:	50 e0       	ldi	r21, 0x00	; 0
     2ce:	ba 01       	movw	r22, r20
     2d0:	47 c0       	rjmp	.+142    	; 0x360 <monitor_interrupts+0xc2>
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	04 2e       	mov	r0, r20
     2d8:	02 c0       	rjmp	.+4      	; 0x2de <monitor_interrupts+0x40>
     2da:	88 0f       	add	r24, r24
     2dc:	99 1f       	adc	r25, r25
     2de:	0a 94       	dec	r0
     2e0:	e2 f7       	brpl	.-8      	; 0x2da <monitor_interrupts+0x3c>
     2e2:	09 2e       	mov	r0, r25
     2e4:	00 0c       	add	r0, r0
     2e6:	aa 0b       	sbc	r26, r26
     2e8:	bb 0b       	sbc	r27, r27
     2ea:	48 01       	movw	r8, r16
     2ec:	59 01       	movw	r10, r18
     2ee:	88 22       	and	r8, r24
     2f0:	99 22       	and	r9, r25
     2f2:	aa 22       	and	r10, r26
     2f4:	bb 22       	and	r11, r27
    {
        if (read(pcmsk, i))
     2f6:	89 28       	or	r8, r9
     2f8:	8a 28       	or	r8, r10
     2fa:	8b 28       	or	r8, r11
     2fc:	69 f1       	breq	.+90     	; 0x358 <monitor_interrupts+0xba>
     2fe:	f1 e0       	ldi	r31, 0x01	; 1
     300:	46 01       	movw	r8, r12
     302:	57 01       	movw	r10, r14
     304:	88 22       	and	r8, r24
     306:	99 22       	and	r9, r25
     308:	aa 22       	and	r10, r26
     30a:	bb 22       	and	r11, r27
     30c:	89 28       	or	r8, r9
     30e:	8a 28       	or	r8, r10
     310:	8b 28       	or	r8, r11
     312:	09 f4       	brne	.+2      	; 0x316 <monitor_interrupts+0x78>
     314:	f0 e0       	ldi	r31, 0x00	; 0
        {
            if (read(pina_current, i) != read(pina_previous, i))
     316:	80 90 00 01 	lds	r8, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     31a:	90 90 01 01 	lds	r9, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     31e:	a0 90 02 01 	lds	r10, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     322:	b0 90 03 01 	lds	r11, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     326:	88 21       	and	r24, r8
     328:	99 21       	and	r25, r9
     32a:	aa 21       	and	r26, r10
     32c:	bb 21       	and	r27, r11
     32e:	e1 e0       	ldi	r30, 0x01	; 1
     330:	89 2b       	or	r24, r25
     332:	8a 2b       	or	r24, r26
     334:	8b 2b       	or	r24, r27
     336:	09 f4       	brne	.+2      	; 0x33a <monitor_interrupts+0x9c>
     338:	e0 e0       	ldi	r30, 0x00	; 0
     33a:	fe 17       	cp	r31, r30
     33c:	69 f0       	breq	.+26     	; 0x358 <monitor_interrupts+0xba>
            {
                data_memory_set_bit(PCIFR + 256, PCIF0);
     33e:	0b b3       	in	r16, 0x1b	; 27
     340:	10 e0       	ldi	r17, 0x00	; 0
     342:	13 95       	inc	r17
*                     - bit    : Bit to set in data memory register.
********************************************************************************/
static inline int data_memory_set_bit(const uint16_t address,
const uint8_t bit)
{
	const uint32_t data = data_memory_read(address);
     344:	c8 01       	movw	r24, r16
     346:	0e 94 68 07 	call	0xed0	; 0xed0 <data_memory_read>
	return data_memory_write(address, data | (1 << bit));
     34a:	ab 01       	movw	r20, r22
     34c:	bc 01       	movw	r22, r24
     34e:	41 60       	ori	r20, 0x01	; 1
     350:	c8 01       	movw	r24, r16
     352:	0e 94 53 07 	call	0xea6	; 0xea6 <data_memory_write>
     356:	0a c0       	rjmp	.+20     	; 0x36c <monitor_interrupts+0xce>
static inline void monitor_pcint(void)
{
    const uint32_t pina_current = data_memory_read(PINA);
    const uint32_t pcmsk = data_memory_read(PCMSKA);

    for (uint32_t i = 0; i < CPU_REGISTER_DATA_WIDTH; ++i)
     358:	4f 5f       	subi	r20, 0xFF	; 255
     35a:	5f 4f       	sbci	r21, 0xFF	; 255
     35c:	6f 4f       	sbci	r22, 0xFF	; 255
     35e:	7f 4f       	sbci	r23, 0xFF	; 255
     360:	40 32       	cpi	r20, 0x20	; 32
     362:	51 05       	cpc	r21, r1
     364:	61 05       	cpc	r22, r1
     366:	71 05       	cpc	r23, r1
     368:	08 f4       	brcc	.+2      	; 0x36c <monitor_interrupts+0xce>
     36a:	b3 cf       	rjmp	.-154    	; 0x2d2 <monitor_interrupts+0x34>
                break;
            }
        }
    }

    pina_previous = pina_current;
     36c:	c0 92 00 01 	sts	0x0100, r12	; 0x800100 <__DATA_REGION_ORIGIN__>
     370:	d0 92 01 01 	sts	0x0101, r13	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     374:	e0 92 02 01 	sts	0x0102, r14	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     378:	f0 92 03 01 	sts	0x0103, r15	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>

static void monitor_interrupts(void)
{
	monitor_pcint();
	return;
}
     37c:	1f 91       	pop	r17
     37e:	0f 91       	pop	r16
     380:	ff 90       	pop	r15
     382:	ef 90       	pop	r14
     384:	df 90       	pop	r13
     386:	cf 90       	pop	r12
     388:	bf 90       	pop	r11
     38a:	af 90       	pop	r10
     38c:	9f 90       	pop	r9
     38e:	8f 90       	pop	r8
     390:	08 95       	ret

00000392 <generate_interrupt>:
*                     the current interrupt is executed.
*
*                     - interrupt_vector: Jump address for generating interrupt.
********************************************************************************/
static void generate_interrupt(const uint16_t interrupt_vector)
{
     392:	cf 93       	push	r28
     394:	df 93       	push	r29
     396:	ec 01       	movw	r28, r24
    stack_push(pc);
     398:	60 91 8e 01 	lds	r22, 0x018E	; 0x80018e <pc>
     39c:	70 91 8f 01 	lds	r23, 0x018F	; 0x80018f <pc+0x1>
     3a0:	80 e0       	ldi	r24, 0x00	; 0
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	0e 94 94 08 	call	0x1128	; 0x1128 <stack_push>
    clr(sr, I);
     3a8:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <sr>
     3ac:	8f 7d       	andi	r24, 0xDF	; 223
     3ae:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <sr>
    pc = interrupt_vector;
     3b2:	d0 93 8f 01 	sts	0x018F, r29	; 0x80018f <pc+0x1>
     3b6:	c0 93 8e 01 	sts	0x018E, r28	; 0x80018e <pc>
    return;
}
     3ba:	df 91       	pop	r29
     3bc:	cf 91       	pop	r28
     3be:	08 95       	ret

000003c0 <check_for_irq>:
*                will be generated again and again). A jump is made to the
*                corresponding interrupt vector, such as PCINT0_vect.
********************************************************************************/

static void check_for_irq(void)
{
     3c0:	cf 93       	push	r28
    if (read(sr, I))
     3c2:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <sr>
     3c6:	85 ff       	sbrs	r24, 5
     3c8:	1c c0       	rjmp	.+56     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
    {
        const uint32_t pcifr = data_memory_read(IFR);
     3ca:	84 e0       	ldi	r24, 0x04	; 4
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	0e 94 68 07 	call	0xed0	; 0xed0 <data_memory_read>
     3d2:	c6 2f       	mov	r28, r22
        const uint32_t pcicr = data_memory_read(ICR);
     3d4:	83 e0       	ldi	r24, 0x03	; 3
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	0e 94 68 07 	call	0xed0	; 0xed0 <data_memory_read>

        if (read(pcifr, PCIF0) && read(pcicr, PCIE0))
     3dc:	c0 ff       	sbrs	r28, 0
     3de:	11 c0       	rjmp	.+34     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
     3e0:	60 ff       	sbrs	r22, 0
     3e2:	0f c0       	rjmp	.+30     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
*                        - bit    : Bit to clear in data memory register.
********************************************************************************/
static inline int data_memory_clear_bit(const uint16_t address,
const uint8_t bit)
{
	const uint32_t data = data_memory_read(address);
     3e4:	84 e0       	ldi	r24, 0x04	; 4
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	0e 94 68 07 	call	0xed0	; 0xed0 <data_memory_read>
	return data_memory_write(address, data & ~(1 << bit));
     3ec:	ab 01       	movw	r20, r22
     3ee:	bc 01       	movw	r22, r24
     3f0:	4e 7f       	andi	r20, 0xFE	; 254
     3f2:	84 e0       	ldi	r24, 0x04	; 4
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	0e 94 53 07 	call	0xea6	; 0xea6 <data_memory_write>
        {
            data_memory_clear_bit(IFR, PCIF0);
            generate_interrupt(PCINT_vect);
     3fa:	82 e0       	ldi	r24, 0x02	; 2
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	0e 94 c9 01 	call	0x392	; 0x392 <generate_interrupt>
        }
    }
    return;
}
     402:	cf 91       	pop	r28
     404:	08 95       	ret

00000406 <control_unit_reset>:
/********************************************************************************
* control_unit_reset: Resets control unit registers and corresponding program.
********************************************************************************/
void control_unit_reset(void)
{
    ir = 0x00;
     406:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <ir>
     40a:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <ir+0x1>
     40e:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <ir+0x2>
     412:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <ir+0x3>
     416:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <ir+0x4>
     41a:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <ir+0x5>
     41e:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <ir+0x6>
     422:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <ir+0x7>
    pc = 0x00;
     426:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <pc+0x1>
     42a:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <pc>
    mar = 0x00;
    sr = 0x00;
     42e:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <sr>

    op_code = 0x00;
     432:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <op_code+0x1>
     436:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <op_code>
    op1 = 0x00;
     43a:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <op1+0x1>
     43e:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <op1>
    op2 = 0x00;
     442:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <op2>
     446:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <op2+0x1>
     44a:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <op2+0x2>
     44e:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <op2+0x3>

    state = CPU_STATE_FETCH;
     452:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <state>

    pina_previous = 0x00;
     456:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
     45a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     45e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     462:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>

    for (uint32_t i = 0; i < CPU_REGISTER_ADDRESS_WIDTH; ++i)
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	dc 01       	movw	r26, r24
     46c:	0e c0       	rjmp	.+28     	; 0x48a <control_unit_reset+0x84>
    {
        reg[i] = 0x00;
     46e:	fc 01       	movw	r30, r24
     470:	ee 0f       	add	r30, r30
     472:	ff 1f       	adc	r31, r31
     474:	ee 0f       	add	r30, r30
     476:	ff 1f       	adc	r31, r31
     478:	ec 5f       	subi	r30, 0xFC	; 252
     47a:	fe 4f       	sbci	r31, 0xFE	; 254
     47c:	10 82       	st	Z, r1
     47e:	11 82       	std	Z+1, r1	; 0x01
     480:	12 82       	std	Z+2, r1	; 0x02
     482:	13 82       	std	Z+3, r1	; 0x03

    state = CPU_STATE_FETCH;

    pina_previous = 0x00;

    for (uint32_t i = 0; i < CPU_REGISTER_ADDRESS_WIDTH; ++i)
     484:	01 96       	adiw	r24, 0x01	; 1
     486:	a1 1d       	adc	r26, r1
     488:	b1 1d       	adc	r27, r1
     48a:	80 32       	cpi	r24, 0x20	; 32
     48c:	91 05       	cpc	r25, r1
     48e:	a1 05       	cpc	r26, r1
     490:	b1 05       	cpc	r27, r1
     492:	68 f3       	brcs	.-38     	; 0x46e <control_unit_reset+0x68>
    {
        reg[i] = 0x00;
    }


    data_memory_reset();
     494:	0e 94 3a 07 	call	0xe74	; 0xe74 <data_memory_reset>
    stack_reset();
     498:	0e 94 73 08 	call	0x10e6	; 0x10e6 <stack_reset>
    program_memory_write();
     49c:	0e 94 81 07 	call	0xf02	; 0xf02 <program_memory_write>
	control_unit_io_reset();
     4a0:	0e 94 ef 00 	call	0x1de	; 0x1de <control_unit_io_reset>
     4a4:	08 95       	ret

000004a6 <control_unit_run_next_state>:

/********************************************************************************
* control_unit_run_next_state: Runs next state in the CPU instruction cycle:
********************************************************************************/
void control_unit_run_next_state(void)
{
     4a6:	ef 92       	push	r14
     4a8:	ff 92       	push	r15
     4aa:	0f 93       	push	r16
     4ac:	1f 93       	push	r17
     4ae:	cf 93       	push	r28
     4b0:	df 93       	push	r29
    switch (state)
     4b2:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <state>
     4b6:	81 30       	cpi	r24, 0x01	; 1
     4b8:	41 f1       	breq	.+80     	; 0x50a <control_unit_run_next_state+0x64>
     4ba:	20 f0       	brcs	.+8      	; 0x4c4 <control_unit_run_next_state+0x1e>
     4bc:	82 30       	cpi	r24, 0x02	; 2
     4be:	09 f4       	brne	.+2      	; 0x4c2 <control_unit_run_next_state+0x1c>
     4c0:	5e c0       	rjmp	.+188    	; 0x57e <control_unit_run_next_state+0xd8>
     4c2:	cb c4       	rjmp	.+2454   	; 0xe5a <__stack+0x55b>
    {
    case CPU_STATE_FETCH:
    {
        ir = program_memory_read(pc); /* Fetches next instruction. */
     4c4:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <pc>
     4c8:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <pc+0x1>
     4cc:	0e 94 55 08 	call	0x10aa	; 0x10aa <program_memory_read>
     4d0:	20 93 90 01 	sts	0x0190, r18	; 0x800190 <ir>
     4d4:	30 93 91 01 	sts	0x0191, r19	; 0x800191 <ir+0x1>
     4d8:	40 93 92 01 	sts	0x0192, r20	; 0x800192 <ir+0x2>
     4dc:	50 93 93 01 	sts	0x0193, r21	; 0x800193 <ir+0x3>
     4e0:	60 93 94 01 	sts	0x0194, r22	; 0x800194 <ir+0x4>
     4e4:	70 93 95 01 	sts	0x0195, r23	; 0x800195 <ir+0x5>
     4e8:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <ir+0x6>
     4ec:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <ir+0x7>
        mar = pc;                     /* Stores address of current instruction. */
     4f0:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <pc>
     4f4:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <pc+0x1>
        pc++;                         /* Program counter points to next instruction. */
     4f8:	01 96       	adiw	r24, 0x01	; 1
     4fa:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <pc+0x1>
     4fe:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <pc>
        state = CPU_STATE_DECODE;     /* Decodes the instruction during next clock cycle. */
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <state>
        break;
     508:	aa c4       	rjmp	.+2388   	; 0xe5e <__stack+0x55f>
    }
    case CPU_STATE_DECODE:
    {
        op_code = ir >> 16;           /* Bit 23 downto 16 consists of the OP code. */
     50a:	b0 91 90 01 	lds	r27, 0x0190	; 0x800190 <ir>
     50e:	a0 91 91 01 	lds	r26, 0x0191	; 0x800191 <ir+0x1>
     512:	f0 91 92 01 	lds	r31, 0x0192	; 0x800192 <ir+0x2>
     516:	e0 91 93 01 	lds	r30, 0x0193	; 0x800193 <ir+0x3>
     51a:	f0 90 94 01 	lds	r15, 0x0194	; 0x800194 <ir+0x4>
     51e:	10 91 95 01 	lds	r17, 0x0195	; 0x800195 <ir+0x5>
     522:	d0 91 96 01 	lds	r29, 0x0196	; 0x800196 <ir+0x6>
     526:	c0 91 97 01 	lds	r28, 0x0197	; 0x800197 <ir+0x7>
     52a:	2b 2f       	mov	r18, r27
     52c:	3a 2f       	mov	r19, r26
     52e:	4f 2f       	mov	r20, r31
     530:	5e 2f       	mov	r21, r30
     532:	6f 2d       	mov	r22, r15
     534:	71 2f       	mov	r23, r17
     536:	8d 2f       	mov	r24, r29
     538:	9c 2f       	mov	r25, r28
     53a:	00 e1       	ldi	r16, 0x10	; 16
     53c:	0e 94 48 0a 	call	0x1490	; 0x1490 <__lshrdi3>
     540:	20 93 8b 01 	sts	0x018B, r18	; 0x80018b <op_code>
     544:	30 93 8c 01 	sts	0x018C, r19	; 0x80018c <op_code+0x1>
        op1 = ir >> 8;                /* Bit 15 downto 8 consists of the first operand. */
     548:	2b 2f       	mov	r18, r27
     54a:	3a 2f       	mov	r19, r26
     54c:	4f 2f       	mov	r20, r31
     54e:	5e 2f       	mov	r21, r30
     550:	6f 2d       	mov	r22, r15
     552:	71 2f       	mov	r23, r17
     554:	8d 2f       	mov	r24, r29
     556:	9c 2f       	mov	r25, r28
     558:	08 e0       	ldi	r16, 0x08	; 8
     55a:	0e 94 48 0a 	call	0x1490	; 0x1490 <__lshrdi3>
     55e:	20 93 89 01 	sts	0x0189, r18	; 0x800189 <op1>
     562:	30 93 8a 01 	sts	0x018A, r19	; 0x80018a <op1+0x1>
        op2 = ir;                     /* Bit 7 downto 0 consists of the second operand. */
     566:	b0 93 85 01 	sts	0x0185, r27	; 0x800185 <op2>
     56a:	a0 93 86 01 	sts	0x0186, r26	; 0x800186 <op2+0x1>
     56e:	f0 93 87 01 	sts	0x0187, r31	; 0x800187 <op2+0x2>
     572:	e0 93 88 01 	sts	0x0188, r30	; 0x800188 <op2+0x3>
        state = CPU_STATE_EXECUTE;    /* Executes the instruction during next clock cycle. */
     576:	82 e0       	ldi	r24, 0x02	; 2
     578:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <state>
        break;
     57c:	70 c4       	rjmp	.+2272   	; 0xe5e <__stack+0x55f>
    }
    case CPU_STATE_EXECUTE:
    {
        switch (op_code) /* Checks the OP code.*/
     57e:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <op_code>
     582:	f0 91 8c 01 	lds	r31, 0x018C	; 0x80018c <op_code+0x1>
     586:	ea 32       	cpi	r30, 0x2A	; 42
     588:	f1 05       	cpc	r31, r1
     58a:	08 f0       	brcs	.+2      	; 0x58e <control_unit_run_next_state+0xe8>
     58c:	5f c4       	rjmp	.+2238   	; 0xe4c <__stack+0x54d>
     58e:	ec 5c       	subi	r30, 0xCC	; 204
     590:	ff 4f       	sbci	r31, 0xFF	; 255
     592:	0c 94 40 0a 	jmp	0x1480	; 0x1480 <__tablejump2__>
        {
            break;
        }
        case LDI: /* Loads constant into specified CPU register. */
        {
            reg[op1] = op2;
     596:	e0 91 89 01 	lds	r30, 0x0189	; 0x800189 <op1>
     59a:	f0 91 8a 01 	lds	r31, 0x018A	; 0x80018a <op1+0x1>
     59e:	ee 0f       	add	r30, r30
     5a0:	ff 1f       	adc	r31, r31
     5a2:	ee 0f       	add	r30, r30
     5a4:	ff 1f       	adc	r31, r31
     5a6:	ec 5f       	subi	r30, 0xFC	; 252
     5a8:	fe 4f       	sbci	r31, 0xFE	; 254
     5aa:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <op2>
     5ae:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <op2+0x1>
     5b2:	a0 91 87 01 	lds	r26, 0x0187	; 0x800187 <op2+0x2>
     5b6:	b0 91 88 01 	lds	r27, 0x0188	; 0x800188 <op2+0x3>
     5ba:	80 83       	st	Z, r24
     5bc:	91 83       	std	Z+1, r25	; 0x01
     5be:	a2 83       	std	Z+2, r26	; 0x02
     5c0:	b3 83       	std	Z+3, r27	; 0x03
            break;
     5c2:	46 c4       	rjmp	.+2188   	; 0xe50 <__stack+0x551>
        }
        case MOV: /* Copies value to specified CPU register. */
        {
            reg[op1] = reg[op2];
     5c4:	e0 91 89 01 	lds	r30, 0x0189	; 0x800189 <op1>
     5c8:	f0 91 8a 01 	lds	r31, 0x018A	; 0x80018a <op1+0x1>
     5cc:	a0 91 85 01 	lds	r26, 0x0185	; 0x800185 <op2>
     5d0:	b0 91 86 01 	lds	r27, 0x0186	; 0x800186 <op2+0x1>
     5d4:	aa 0f       	add	r26, r26
     5d6:	bb 1f       	adc	r27, r27
     5d8:	aa 0f       	add	r26, r26
     5da:	bb 1f       	adc	r27, r27
     5dc:	ac 5f       	subi	r26, 0xFC	; 252
     5de:	be 4f       	sbci	r27, 0xFE	; 254
     5e0:	8d 91       	ld	r24, X+
     5e2:	9d 91       	ld	r25, X+
     5e4:	0d 90       	ld	r0, X+
     5e6:	bc 91       	ld	r27, X
     5e8:	a0 2d       	mov	r26, r0
     5ea:	ee 0f       	add	r30, r30
     5ec:	ff 1f       	adc	r31, r31
     5ee:	ee 0f       	add	r30, r30
     5f0:	ff 1f       	adc	r31, r31
     5f2:	ec 5f       	subi	r30, 0xFC	; 252
     5f4:	fe 4f       	sbci	r31, 0xFE	; 254
     5f6:	80 83       	st	Z, r24
     5f8:	91 83       	std	Z+1, r25	; 0x01
     5fa:	a2 83       	std	Z+2, r26	; 0x02
     5fc:	b3 83       	std	Z+3, r27	; 0x03
            break;
     5fe:	28 c4       	rjmp	.+2128   	; 0xe50 <__stack+0x551>
        }
        case OUT: /* Writes value to I/O location (address 0 - 255) in data memory. */
        {
            data_memory_write(op1, reg[op2]);
     600:	e0 91 85 01 	lds	r30, 0x0185	; 0x800185 <op2>
     604:	f0 91 86 01 	lds	r31, 0x0186	; 0x800186 <op2+0x1>
     608:	ee 0f       	add	r30, r30
     60a:	ff 1f       	adc	r31, r31
     60c:	ee 0f       	add	r30, r30
     60e:	ff 1f       	adc	r31, r31
     610:	ec 5f       	subi	r30, 0xFC	; 252
     612:	fe 4f       	sbci	r31, 0xFE	; 254
     614:	40 81       	ld	r20, Z
     616:	51 81       	ldd	r21, Z+1	; 0x01
     618:	62 81       	ldd	r22, Z+2	; 0x02
     61a:	73 81       	ldd	r23, Z+3	; 0x03
     61c:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <op1>
     620:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <op1+0x1>
     624:	0e 94 53 07 	call	0xea6	; 0xea6 <data_memory_write>
            break;
     628:	13 c4       	rjmp	.+2086   	; 0xe50 <__stack+0x551>
        }
        case IN: /* Reads value from I/O location (address 0 - 255) in data memory. */
        {
            reg[op1] = data_memory_read(op2);
     62a:	c0 91 89 01 	lds	r28, 0x0189	; 0x800189 <op1>
     62e:	d0 91 8a 01 	lds	r29, 0x018A	; 0x80018a <op1+0x1>
     632:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <op2>
     636:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <op2+0x1>
     63a:	0e 94 68 07 	call	0xed0	; 0xed0 <data_memory_read>
     63e:	cc 0f       	add	r28, r28
     640:	dd 1f       	adc	r29, r29
     642:	cc 0f       	add	r28, r28
     644:	dd 1f       	adc	r29, r29
     646:	cc 5f       	subi	r28, 0xFC	; 252
     648:	de 4f       	sbci	r29, 0xFE	; 254
     64a:	68 83       	st	Y, r22
     64c:	79 83       	std	Y+1, r23	; 0x01
     64e:	8a 83       	std	Y+2, r24	; 0x02
     650:	9b 83       	std	Y+3, r25	; 0x03
            break;
     652:	fe c3       	rjmp	.+2044   	; 0xe50 <__stack+0x551>
        }
        case STS: /* Stores value to data memory (address 256 - 511, hence an offset of 256). */
        {
            data_memory_write(op1, reg[op2]);
     654:	e0 91 85 01 	lds	r30, 0x0185	; 0x800185 <op2>
     658:	f0 91 86 01 	lds	r31, 0x0186	; 0x800186 <op2+0x1>
     65c:	ee 0f       	add	r30, r30
     65e:	ff 1f       	adc	r31, r31
     660:	ee 0f       	add	r30, r30
     662:	ff 1f       	adc	r31, r31
     664:	ec 5f       	subi	r30, 0xFC	; 252
     666:	fe 4f       	sbci	r31, 0xFE	; 254
     668:	40 81       	ld	r20, Z
     66a:	51 81       	ldd	r21, Z+1	; 0x01
     66c:	62 81       	ldd	r22, Z+2	; 0x02
     66e:	73 81       	ldd	r23, Z+3	; 0x03
     670:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <op1>
     674:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <op1+0x1>
     678:	0e 94 53 07 	call	0xea6	; 0xea6 <data_memory_write>
            break;
     67c:	e9 c3       	rjmp	.+2002   	; 0xe50 <__stack+0x551>
        }
        case LDS: /* Loads value from data memory (address 256 - 511, hence an offset of 256). */
        {
            reg[op1] = data_memory_read(op2);
     67e:	c0 91 89 01 	lds	r28, 0x0189	; 0x800189 <op1>
     682:	d0 91 8a 01 	lds	r29, 0x018A	; 0x80018a <op1+0x1>
     686:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <op2>
     68a:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <op2+0x1>
     68e:	0e 94 68 07 	call	0xed0	; 0xed0 <data_memory_read>
     692:	cc 0f       	add	r28, r28
     694:	dd 1f       	adc	r29, r29
     696:	cc 0f       	add	r28, r28
     698:	dd 1f       	adc	r29, r29
     69a:	cc 5f       	subi	r28, 0xFC	; 252
     69c:	de 4f       	sbci	r29, 0xFE	; 254
     69e:	68 83       	st	Y, r22
     6a0:	79 83       	std	Y+1, r23	; 0x01
     6a2:	8a 83       	std	Y+2, r24	; 0x02
     6a4:	9b 83       	std	Y+3, r25	; 0x03
            break;
     6a6:	d4 c3       	rjmp	.+1960   	; 0xe50 <__stack+0x551>
        }
        case CLR: /* Clears content of CPU register. */
        {
            reg[op1] = 0x00;
     6a8:	e0 91 89 01 	lds	r30, 0x0189	; 0x800189 <op1>
     6ac:	f0 91 8a 01 	lds	r31, 0x018A	; 0x80018a <op1+0x1>
     6b0:	ee 0f       	add	r30, r30
     6b2:	ff 1f       	adc	r31, r31
     6b4:	ee 0f       	add	r30, r30
     6b6:	ff 1f       	adc	r31, r31
     6b8:	ec 5f       	subi	r30, 0xFC	; 252
     6ba:	fe 4f       	sbci	r31, 0xFE	; 254
     6bc:	10 82       	st	Z, r1
     6be:	11 82       	std	Z+1, r1	; 0x01
     6c0:	12 82       	std	Z+2, r1	; 0x02
     6c2:	13 82       	std	Z+3, r1	; 0x03
            break;
     6c4:	c5 c3       	rjmp	.+1930   	; 0xe50 <__stack+0x551>
        }
        case ORI: /* Performs bitwise OR with a constant. */
        {
            reg[op1] = alu(OR, reg[op1], op2, &sr);
     6c6:	c0 91 89 01 	lds	r28, 0x0189	; 0x800189 <op1>
     6ca:	d0 91 8a 01 	lds	r29, 0x018A	; 0x80018a <op1+0x1>
     6ce:	00 91 85 01 	lds	r16, 0x0185	; 0x800185 <op2>
     6d2:	10 91 86 01 	lds	r17, 0x0186	; 0x800186 <op2+0x1>
     6d6:	20 91 87 01 	lds	r18, 0x0187	; 0x800187 <op2+0x2>
     6da:	30 91 88 01 	lds	r19, 0x0188	; 0x800188 <op2+0x3>
     6de:	cc 0f       	add	r28, r28
     6e0:	dd 1f       	adc	r29, r29
     6e2:	cc 0f       	add	r28, r28
     6e4:	dd 1f       	adc	r29, r29
     6e6:	cc 5f       	subi	r28, 0xFC	; 252
     6e8:	de 4f       	sbci	r29, 0xFE	; 254
     6ea:	48 81       	ld	r20, Y
     6ec:	59 81       	ldd	r21, Y+1	; 0x01
     6ee:	6a 81       	ldd	r22, Y+2	; 0x02
     6f0:	7b 81       	ldd	r23, Y+3	; 0x03
     6f2:	0f 2e       	mov	r0, r31
     6f4:	fd e8       	ldi	r31, 0x8D	; 141
     6f6:	ef 2e       	mov	r14, r31
     6f8:	f1 e0       	ldi	r31, 0x01	; 1
     6fa:	ff 2e       	mov	r15, r31
     6fc:	f0 2d       	mov	r31, r0
     6fe:	8b e0       	ldi	r24, 0x0B	; 11
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	0e 94 72 00 	call	0xe4	; 0xe4 <alu>
     706:	68 83       	st	Y, r22
     708:	79 83       	std	Y+1, r23	; 0x01
     70a:	8a 83       	std	Y+2, r24	; 0x02
     70c:	9b 83       	std	Y+3, r25	; 0x03
            break;
     70e:	a0 c3       	rjmp	.+1856   	; 0xe50 <__stack+0x551>
        }
        case ANDI: /* Performs bitwise AND with a constant. */
        {
            reg[op1] = alu(AND, reg[op1], op2, &sr);
     710:	c0 91 89 01 	lds	r28, 0x0189	; 0x800189 <op1>
     714:	d0 91 8a 01 	lds	r29, 0x018A	; 0x80018a <op1+0x1>
     718:	00 91 85 01 	lds	r16, 0x0185	; 0x800185 <op2>
     71c:	10 91 86 01 	lds	r17, 0x0186	; 0x800186 <op2+0x1>
     720:	20 91 87 01 	lds	r18, 0x0187	; 0x800187 <op2+0x2>
     724:	30 91 88 01 	lds	r19, 0x0188	; 0x800188 <op2+0x3>
     728:	cc 0f       	add	r28, r28
     72a:	dd 1f       	adc	r29, r29
     72c:	cc 0f       	add	r28, r28
     72e:	dd 1f       	adc	r29, r29
     730:	cc 5f       	subi	r28, 0xFC	; 252
     732:	de 4f       	sbci	r29, 0xFE	; 254
     734:	48 81       	ld	r20, Y
     736:	59 81       	ldd	r21, Y+1	; 0x01
     738:	6a 81       	ldd	r22, Y+2	; 0x02
     73a:	7b 81       	ldd	r23, Y+3	; 0x03
     73c:	0f 2e       	mov	r0, r31
     73e:	fd e8       	ldi	r31, 0x8D	; 141
     740:	ef 2e       	mov	r14, r31
     742:	f1 e0       	ldi	r31, 0x01	; 1
     744:	ff 2e       	mov	r15, r31
     746:	f0 2d       	mov	r31, r0
     748:	8c e0       	ldi	r24, 0x0C	; 12
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	0e 94 72 00 	call	0xe4	; 0xe4 <alu>
     750:	68 83       	st	Y, r22
     752:	79 83       	std	Y+1, r23	; 0x01
     754:	8a 83       	std	Y+2, r24	; 0x02
     756:	9b 83       	std	Y+3, r25	; 0x03
            break;
     758:	7b c3       	rjmp	.+1782   	; 0xe50 <__stack+0x551>
        }
        case XORI: /* Performs bitwise XOR with a constant. */
        {
            reg[op1] = alu(XOR, reg[op1], op2, &sr);
     75a:	c0 91 89 01 	lds	r28, 0x0189	; 0x800189 <op1>
     75e:	d0 91 8a 01 	lds	r29, 0x018A	; 0x80018a <op1+0x1>
     762:	00 91 85 01 	lds	r16, 0x0185	; 0x800185 <op2>
     766:	10 91 86 01 	lds	r17, 0x0186	; 0x800186 <op2+0x1>
     76a:	20 91 87 01 	lds	r18, 0x0187	; 0x800187 <op2+0x2>
     76e:	30 91 88 01 	lds	r19, 0x0188	; 0x800188 <op2+0x3>
     772:	cc 0f       	add	r28, r28
     774:	dd 1f       	adc	r29, r29
     776:	cc 0f       	add	r28, r28
     778:	dd 1f       	adc	r29, r29
     77a:	cc 5f       	subi	r28, 0xFC	; 252
     77c:	de 4f       	sbci	r29, 0xFE	; 254
     77e:	48 81       	ld	r20, Y
     780:	59 81       	ldd	r21, Y+1	; 0x01
     782:	6a 81       	ldd	r22, Y+2	; 0x02
     784:	7b 81       	ldd	r23, Y+3	; 0x03
     786:	0f 2e       	mov	r0, r31
     788:	fd e8       	ldi	r31, 0x8D	; 141
     78a:	ef 2e       	mov	r14, r31
     78c:	f1 e0       	ldi	r31, 0x01	; 1
     78e:	ff 2e       	mov	r15, r31
     790:	f0 2d       	mov	r31, r0
     792:	8d e0       	ldi	r24, 0x0D	; 13
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	0e 94 72 00 	call	0xe4	; 0xe4 <alu>
     79a:	68 83       	st	Y, r22
     79c:	79 83       	std	Y+1, r23	; 0x01
     79e:	8a 83       	std	Y+2, r24	; 0x02
     7a0:	9b 83       	std	Y+3, r25	; 0x03
            break;
     7a2:	56 c3       	rjmp	.+1708   	; 0xe50 <__stack+0x551>
        }
        case OR: /* Performs bitwise OR with content in CPU register. */
        {
            reg[op1] = alu(OR, reg[op1], reg[op2], &sr);
     7a4:	c0 91 89 01 	lds	r28, 0x0189	; 0x800189 <op1>
     7a8:	d0 91 8a 01 	lds	r29, 0x018A	; 0x80018a <op1+0x1>
     7ac:	e0 91 85 01 	lds	r30, 0x0185	; 0x800185 <op2>
     7b0:	f0 91 86 01 	lds	r31, 0x0186	; 0x800186 <op2+0x1>
     7b4:	ee 0f       	add	r30, r30
     7b6:	ff 1f       	adc	r31, r31
     7b8:	ee 0f       	add	r30, r30
     7ba:	ff 1f       	adc	r31, r31
     7bc:	ec 5f       	subi	r30, 0xFC	; 252
     7be:	fe 4f       	sbci	r31, 0xFE	; 254
     7c0:	00 81       	ld	r16, Z
     7c2:	11 81       	ldd	r17, Z+1	; 0x01
     7c4:	22 81       	ldd	r18, Z+2	; 0x02
     7c6:	33 81       	ldd	r19, Z+3	; 0x03
     7c8:	cc 0f       	add	r28, r28
     7ca:	dd 1f       	adc	r29, r29
     7cc:	cc 0f       	add	r28, r28
     7ce:	dd 1f       	adc	r29, r29
     7d0:	cc 5f       	subi	r28, 0xFC	; 252
     7d2:	de 4f       	sbci	r29, 0xFE	; 254
     7d4:	48 81       	ld	r20, Y
     7d6:	59 81       	ldd	r21, Y+1	; 0x01
     7d8:	6a 81       	ldd	r22, Y+2	; 0x02
     7da:	7b 81       	ldd	r23, Y+3	; 0x03
     7dc:	0f 2e       	mov	r0, r31
     7de:	fd e8       	ldi	r31, 0x8D	; 141
     7e0:	ef 2e       	mov	r14, r31
     7e2:	f1 e0       	ldi	r31, 0x01	; 1
     7e4:	ff 2e       	mov	r15, r31
     7e6:	f0 2d       	mov	r31, r0
     7e8:	8b e0       	ldi	r24, 0x0B	; 11
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	0e 94 72 00 	call	0xe4	; 0xe4 <alu>
     7f0:	68 83       	st	Y, r22
     7f2:	79 83       	std	Y+1, r23	; 0x01
     7f4:	8a 83       	std	Y+2, r24	; 0x02
     7f6:	9b 83       	std	Y+3, r25	; 0x03
            break;
     7f8:	2b c3       	rjmp	.+1622   	; 0xe50 <__stack+0x551>
        }
        case AND: /* Performs bitwise AND with content in CPU register. */
        {
            reg[op1] = alu(AND, reg[op1], reg[op2], &sr);
     7fa:	c0 91 89 01 	lds	r28, 0x0189	; 0x800189 <op1>
     7fe:	d0 91 8a 01 	lds	r29, 0x018A	; 0x80018a <op1+0x1>
     802:	e0 91 85 01 	lds	r30, 0x0185	; 0x800185 <op2>
     806:	f0 91 86 01 	lds	r31, 0x0186	; 0x800186 <op2+0x1>
     80a:	ee 0f       	add	r30, r30
     80c:	ff 1f       	adc	r31, r31
     80e:	ee 0f       	add	r30, r30
     810:	ff 1f       	adc	r31, r31
     812:	ec 5f       	subi	r30, 0xFC	; 252
     814:	fe 4f       	sbci	r31, 0xFE	; 254
     816:	00 81       	ld	r16, Z
     818:	11 81       	ldd	r17, Z+1	; 0x01
     81a:	22 81       	ldd	r18, Z+2	; 0x02
     81c:	33 81       	ldd	r19, Z+3	; 0x03
     81e:	cc 0f       	add	r28, r28
     820:	dd 1f       	adc	r29, r29
     822:	cc 0f       	add	r28, r28
     824:	dd 1f       	adc	r29, r29
     826:	cc 5f       	subi	r28, 0xFC	; 252
     828:	de 4f       	sbci	r29, 0xFE	; 254
     82a:	48 81       	ld	r20, Y
     82c:	59 81       	ldd	r21, Y+1	; 0x01
     82e:	6a 81       	ldd	r22, Y+2	; 0x02
     830:	7b 81       	ldd	r23, Y+3	; 0x03
     832:	0f 2e       	mov	r0, r31
     834:	fd e8       	ldi	r31, 0x8D	; 141
     836:	ef 2e       	mov	r14, r31
     838:	f1 e0       	ldi	r31, 0x01	; 1
     83a:	ff 2e       	mov	r15, r31
     83c:	f0 2d       	mov	r31, r0
     83e:	8c e0       	ldi	r24, 0x0C	; 12
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	0e 94 72 00 	call	0xe4	; 0xe4 <alu>
     846:	68 83       	st	Y, r22
     848:	79 83       	std	Y+1, r23	; 0x01
     84a:	8a 83       	std	Y+2, r24	; 0x02
     84c:	9b 83       	std	Y+3, r25	; 0x03
            break;
     84e:	00 c3       	rjmp	.+1536   	; 0xe50 <__stack+0x551>
        }
        case XOR: /* Performs bitwise AND with content in CPU register. */
        {
            reg[op1] = alu(XOR, reg[op1], reg[op2], &sr);
     850:	c0 91 89 01 	lds	r28, 0x0189	; 0x800189 <op1>
     854:	d0 91 8a 01 	lds	r29, 0x018A	; 0x80018a <op1+0x1>
     858:	e0 91 85 01 	lds	r30, 0x0185	; 0x800185 <op2>
     85c:	f0 91 86 01 	lds	r31, 0x0186	; 0x800186 <op2+0x1>
     860:	ee 0f       	add	r30, r30
     862:	ff 1f       	adc	r31, r31
     864:	ee 0f       	add	r30, r30
     866:	ff 1f       	adc	r31, r31
     868:	ec 5f       	subi	r30, 0xFC	; 252
     86a:	fe 4f       	sbci	r31, 0xFE	; 254
     86c:	00 81       	ld	r16, Z
     86e:	11 81       	ldd	r17, Z+1	; 0x01
     870:	22 81       	ldd	r18, Z+2	; 0x02
     872:	33 81       	ldd	r19, Z+3	; 0x03
     874:	cc 0f       	add	r28, r28
     876:	dd 1f       	adc	r29, r29
     878:	cc 0f       	add	r28, r28
     87a:	dd 1f       	adc	r29, r29
     87c:	cc 5f       	subi	r28, 0xFC	; 252
     87e:	de 4f       	sbci	r29, 0xFE	; 254
     880:	48 81       	ld	r20, Y
     882:	59 81       	ldd	r21, Y+1	; 0x01
     884:	6a 81       	ldd	r22, Y+2	; 0x02
     886:	7b 81       	ldd	r23, Y+3	; 0x03
     888:	0f 2e       	mov	r0, r31
     88a:	fd e8       	ldi	r31, 0x8D	; 141
     88c:	ef 2e       	mov	r14, r31
     88e:	f1 e0       	ldi	r31, 0x01	; 1
     890:	ff 2e       	mov	r15, r31
     892:	f0 2d       	mov	r31, r0
     894:	8d e0       	ldi	r24, 0x0D	; 13
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	0e 94 72 00 	call	0xe4	; 0xe4 <alu>
     89c:	68 83       	st	Y, r22
     89e:	79 83       	std	Y+1, r23	; 0x01
     8a0:	8a 83       	std	Y+2, r24	; 0x02
     8a2:	9b 83       	std	Y+3, r25	; 0x03
            break;
     8a4:	d5 c2       	rjmp	.+1450   	; 0xe50 <__stack+0x551>
        }
        case ADDI: /* Performs addition with a constant. */
        {
            reg[op1] = alu(ADD, reg[op1], op2, &sr);
     8a6:	c0 91 89 01 	lds	r28, 0x0189	; 0x800189 <op1>
     8aa:	d0 91 8a 01 	lds	r29, 0x018A	; 0x80018a <op1+0x1>
     8ae:	00 91 85 01 	lds	r16, 0x0185	; 0x800185 <op2>
     8b2:	10 91 86 01 	lds	r17, 0x0186	; 0x800186 <op2+0x1>
     8b6:	20 91 87 01 	lds	r18, 0x0187	; 0x800187 <op2+0x2>
     8ba:	30 91 88 01 	lds	r19, 0x0188	; 0x800188 <op2+0x3>
     8be:	cc 0f       	add	r28, r28
     8c0:	dd 1f       	adc	r29, r29
     8c2:	cc 0f       	add	r28, r28
     8c4:	dd 1f       	adc	r29, r29
     8c6:	cc 5f       	subi	r28, 0xFC	; 252
     8c8:	de 4f       	sbci	r29, 0xFE	; 254
     8ca:	48 81       	ld	r20, Y
     8cc:	59 81       	ldd	r21, Y+1	; 0x01
     8ce:	6a 81       	ldd	r22, Y+2	; 0x02
     8d0:	7b 81       	ldd	r23, Y+3	; 0x03
     8d2:	0f 2e       	mov	r0, r31
     8d4:	fd e8       	ldi	r31, 0x8D	; 141
     8d6:	ef 2e       	mov	r14, r31
     8d8:	f1 e0       	ldi	r31, 0x01	; 1
     8da:	ff 2e       	mov	r15, r31
     8dc:	f0 2d       	mov	r31, r0
     8de:	80 e1       	ldi	r24, 0x10	; 16
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	0e 94 72 00 	call	0xe4	; 0xe4 <alu>
     8e6:	68 83       	st	Y, r22
     8e8:	79 83       	std	Y+1, r23	; 0x01
     8ea:	8a 83       	std	Y+2, r24	; 0x02
     8ec:	9b 83       	std	Y+3, r25	; 0x03
            break;
     8ee:	b0 c2       	rjmp	.+1376   	; 0xe50 <__stack+0x551>
        }
        case SUBI: /* Performs subtraction with a constant. */
        {
            reg[op1] = alu(SUB, reg[op1], op2, &sr);
     8f0:	c0 91 89 01 	lds	r28, 0x0189	; 0x800189 <op1>
     8f4:	d0 91 8a 01 	lds	r29, 0x018A	; 0x80018a <op1+0x1>
     8f8:	00 91 85 01 	lds	r16, 0x0185	; 0x800185 <op2>
     8fc:	10 91 86 01 	lds	r17, 0x0186	; 0x800186 <op2+0x1>
     900:	20 91 87 01 	lds	r18, 0x0187	; 0x800187 <op2+0x2>
     904:	30 91 88 01 	lds	r19, 0x0188	; 0x800188 <op2+0x3>
     908:	cc 0f       	add	r28, r28
     90a:	dd 1f       	adc	r29, r29
     90c:	cc 0f       	add	r28, r28
     90e:	dd 1f       	adc	r29, r29
     910:	cc 5f       	subi	r28, 0xFC	; 252
     912:	de 4f       	sbci	r29, 0xFE	; 254
     914:	48 81       	ld	r20, Y
     916:	59 81       	ldd	r21, Y+1	; 0x01
     918:	6a 81       	ldd	r22, Y+2	; 0x02
     91a:	7b 81       	ldd	r23, Y+3	; 0x03
     91c:	0f 2e       	mov	r0, r31
     91e:	fd e8       	ldi	r31, 0x8D	; 141
     920:	ef 2e       	mov	r14, r31
     922:	f1 e0       	ldi	r31, 0x01	; 1
     924:	ff 2e       	mov	r15, r31
     926:	f0 2d       	mov	r31, r0
     928:	81 e1       	ldi	r24, 0x11	; 17
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	0e 94 72 00 	call	0xe4	; 0xe4 <alu>
     930:	68 83       	st	Y, r22
     932:	79 83       	std	Y+1, r23	; 0x01
     934:	8a 83       	std	Y+2, r24	; 0x02
     936:	9b 83       	std	Y+3, r25	; 0x03
            break;
     938:	8b c2       	rjmp	.+1302   	; 0xe50 <__stack+0x551>
        }
        case ADD: /* Performs addition with a CPU register. */
        {
            reg[op1] = alu(ADD, reg[op1], reg[op2], &sr);
     93a:	c0 91 89 01 	lds	r28, 0x0189	; 0x800189 <op1>
     93e:	d0 91 8a 01 	lds	r29, 0x018A	; 0x80018a <op1+0x1>
     942:	e0 91 85 01 	lds	r30, 0x0185	; 0x800185 <op2>
     946:	f0 91 86 01 	lds	r31, 0x0186	; 0x800186 <op2+0x1>
     94a:	ee 0f       	add	r30, r30
     94c:	ff 1f       	adc	r31, r31
     94e:	ee 0f       	add	r30, r30
     950:	ff 1f       	adc	r31, r31
     952:	ec 5f       	subi	r30, 0xFC	; 252
     954:	fe 4f       	sbci	r31, 0xFE	; 254
     956:	00 81       	ld	r16, Z
     958:	11 81       	ldd	r17, Z+1	; 0x01
     95a:	22 81       	ldd	r18, Z+2	; 0x02
     95c:	33 81       	ldd	r19, Z+3	; 0x03
     95e:	cc 0f       	add	r28, r28
     960:	dd 1f       	adc	r29, r29
     962:	cc 0f       	add	r28, r28
     964:	dd 1f       	adc	r29, r29
     966:	cc 5f       	subi	r28, 0xFC	; 252
     968:	de 4f       	sbci	r29, 0xFE	; 254
     96a:	48 81       	ld	r20, Y
     96c:	59 81       	ldd	r21, Y+1	; 0x01
     96e:	6a 81       	ldd	r22, Y+2	; 0x02
     970:	7b 81       	ldd	r23, Y+3	; 0x03
     972:	0f 2e       	mov	r0, r31
     974:	fd e8       	ldi	r31, 0x8D	; 141
     976:	ef 2e       	mov	r14, r31
     978:	f1 e0       	ldi	r31, 0x01	; 1
     97a:	ff 2e       	mov	r15, r31
     97c:	f0 2d       	mov	r31, r0
     97e:	80 e1       	ldi	r24, 0x10	; 16
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	0e 94 72 00 	call	0xe4	; 0xe4 <alu>
     986:	68 83       	st	Y, r22
     988:	79 83       	std	Y+1, r23	; 0x01
     98a:	8a 83       	std	Y+2, r24	; 0x02
     98c:	9b 83       	std	Y+3, r25	; 0x03
            break;
     98e:	60 c2       	rjmp	.+1216   	; 0xe50 <__stack+0x551>
        }
        case SUB: /* Performs subtraction with a CPU register. */
        {
            reg[op1] = alu(SUB, reg[op1], reg[op2], &sr);
     990:	c0 91 89 01 	lds	r28, 0x0189	; 0x800189 <op1>
     994:	d0 91 8a 01 	lds	r29, 0x018A	; 0x80018a <op1+0x1>
     998:	e0 91 85 01 	lds	r30, 0x0185	; 0x800185 <op2>
     99c:	f0 91 86 01 	lds	r31, 0x0186	; 0x800186 <op2+0x1>
     9a0:	ee 0f       	add	r30, r30
     9a2:	ff 1f       	adc	r31, r31
     9a4:	ee 0f       	add	r30, r30
     9a6:	ff 1f       	adc	r31, r31
     9a8:	ec 5f       	subi	r30, 0xFC	; 252
     9aa:	fe 4f       	sbci	r31, 0xFE	; 254
     9ac:	00 81       	ld	r16, Z
     9ae:	11 81       	ldd	r17, Z+1	; 0x01
     9b0:	22 81       	ldd	r18, Z+2	; 0x02
     9b2:	33 81       	ldd	r19, Z+3	; 0x03
     9b4:	cc 0f       	add	r28, r28
     9b6:	dd 1f       	adc	r29, r29
     9b8:	cc 0f       	add	r28, r28
     9ba:	dd 1f       	adc	r29, r29
     9bc:	cc 5f       	subi	r28, 0xFC	; 252
     9be:	de 4f       	sbci	r29, 0xFE	; 254
     9c0:	48 81       	ld	r20, Y
     9c2:	59 81       	ldd	r21, Y+1	; 0x01
     9c4:	6a 81       	ldd	r22, Y+2	; 0x02
     9c6:	7b 81       	ldd	r23, Y+3	; 0x03
     9c8:	0f 2e       	mov	r0, r31
     9ca:	fd e8       	ldi	r31, 0x8D	; 141
     9cc:	ef 2e       	mov	r14, r31
     9ce:	f1 e0       	ldi	r31, 0x01	; 1
     9d0:	ff 2e       	mov	r15, r31
     9d2:	f0 2d       	mov	r31, r0
     9d4:	81 e1       	ldi	r24, 0x11	; 17
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	0e 94 72 00 	call	0xe4	; 0xe4 <alu>
     9dc:	68 83       	st	Y, r22
     9de:	79 83       	std	Y+1, r23	; 0x01
     9e0:	8a 83       	std	Y+2, r24	; 0x02
     9e2:	9b 83       	std	Y+3, r25	; 0x03
            break;
     9e4:	35 c2       	rjmp	.+1130   	; 0xe50 <__stack+0x551>
        }
        case INC: /* Increments content of a CPU register. */
        {
            reg[op1] = alu(ADD, reg[op1], 1, &sr);
     9e6:	c0 91 89 01 	lds	r28, 0x0189	; 0x800189 <op1>
     9ea:	d0 91 8a 01 	lds	r29, 0x018A	; 0x80018a <op1+0x1>
     9ee:	cc 0f       	add	r28, r28
     9f0:	dd 1f       	adc	r29, r29
     9f2:	cc 0f       	add	r28, r28
     9f4:	dd 1f       	adc	r29, r29
     9f6:	cc 5f       	subi	r28, 0xFC	; 252
     9f8:	de 4f       	sbci	r29, 0xFE	; 254
     9fa:	48 81       	ld	r20, Y
     9fc:	59 81       	ldd	r21, Y+1	; 0x01
     9fe:	6a 81       	ldd	r22, Y+2	; 0x02
     a00:	7b 81       	ldd	r23, Y+3	; 0x03
     a02:	0f 2e       	mov	r0, r31
     a04:	fd e8       	ldi	r31, 0x8D	; 141
     a06:	ef 2e       	mov	r14, r31
     a08:	f1 e0       	ldi	r31, 0x01	; 1
     a0a:	ff 2e       	mov	r15, r31
     a0c:	f0 2d       	mov	r31, r0
     a0e:	01 e0       	ldi	r16, 0x01	; 1
     a10:	10 e0       	ldi	r17, 0x00	; 0
     a12:	20 e0       	ldi	r18, 0x00	; 0
     a14:	30 e0       	ldi	r19, 0x00	; 0
     a16:	80 e1       	ldi	r24, 0x10	; 16
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	0e 94 72 00 	call	0xe4	; 0xe4 <alu>
     a1e:	68 83       	st	Y, r22
     a20:	79 83       	std	Y+1, r23	; 0x01
     a22:	8a 83       	std	Y+2, r24	; 0x02
     a24:	9b 83       	std	Y+3, r25	; 0x03
            break;
     a26:	14 c2       	rjmp	.+1064   	; 0xe50 <__stack+0x551>
        }
        case DEC: /* Decrements content of a CPU register. */
        {
            reg[op1] = alu(SUB, reg[op1], 1, &sr);
     a28:	c0 91 89 01 	lds	r28, 0x0189	; 0x800189 <op1>
     a2c:	d0 91 8a 01 	lds	r29, 0x018A	; 0x80018a <op1+0x1>
     a30:	cc 0f       	add	r28, r28
     a32:	dd 1f       	adc	r29, r29
     a34:	cc 0f       	add	r28, r28
     a36:	dd 1f       	adc	r29, r29
     a38:	cc 5f       	subi	r28, 0xFC	; 252
     a3a:	de 4f       	sbci	r29, 0xFE	; 254
     a3c:	48 81       	ld	r20, Y
     a3e:	59 81       	ldd	r21, Y+1	; 0x01
     a40:	6a 81       	ldd	r22, Y+2	; 0x02
     a42:	7b 81       	ldd	r23, Y+3	; 0x03
     a44:	0f 2e       	mov	r0, r31
     a46:	fd e8       	ldi	r31, 0x8D	; 141
     a48:	ef 2e       	mov	r14, r31
     a4a:	f1 e0       	ldi	r31, 0x01	; 1
     a4c:	ff 2e       	mov	r15, r31
     a4e:	f0 2d       	mov	r31, r0
     a50:	01 e0       	ldi	r16, 0x01	; 1
     a52:	10 e0       	ldi	r17, 0x00	; 0
     a54:	20 e0       	ldi	r18, 0x00	; 0
     a56:	30 e0       	ldi	r19, 0x00	; 0
     a58:	81 e1       	ldi	r24, 0x11	; 17
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	0e 94 72 00 	call	0xe4	; 0xe4 <alu>
     a60:	68 83       	st	Y, r22
     a62:	79 83       	std	Y+1, r23	; 0x01
     a64:	8a 83       	std	Y+2, r24	; 0x02
     a66:	9b 83       	std	Y+3, r25	; 0x03
            break;
     a68:	f3 c1       	rjmp	.+998    	; 0xe50 <__stack+0x551>
        }
        case CPI: /* Compares content between CPU register with a constant. */
        {
            (void)alu(SUB, reg[op1], op2, &sr); /* Return value is not stored. */
     a6a:	e0 91 89 01 	lds	r30, 0x0189	; 0x800189 <op1>
     a6e:	f0 91 8a 01 	lds	r31, 0x018A	; 0x80018a <op1+0x1>
     a72:	ee 0f       	add	r30, r30
     a74:	ff 1f       	adc	r31, r31
     a76:	ee 0f       	add	r30, r30
     a78:	ff 1f       	adc	r31, r31
     a7a:	ec 5f       	subi	r30, 0xFC	; 252
     a7c:	fe 4f       	sbci	r31, 0xFE	; 254
     a7e:	40 81       	ld	r20, Z
     a80:	51 81       	ldd	r21, Z+1	; 0x01
     a82:	62 81       	ldd	r22, Z+2	; 0x02
     a84:	73 81       	ldd	r23, Z+3	; 0x03
     a86:	00 91 85 01 	lds	r16, 0x0185	; 0x800185 <op2>
     a8a:	10 91 86 01 	lds	r17, 0x0186	; 0x800186 <op2+0x1>
     a8e:	20 91 87 01 	lds	r18, 0x0187	; 0x800187 <op2+0x2>
     a92:	30 91 88 01 	lds	r19, 0x0188	; 0x800188 <op2+0x3>
     a96:	0f 2e       	mov	r0, r31
     a98:	fd e8       	ldi	r31, 0x8D	; 141
     a9a:	ef 2e       	mov	r14, r31
     a9c:	f1 e0       	ldi	r31, 0x01	; 1
     a9e:	ff 2e       	mov	r15, r31
     aa0:	f0 2d       	mov	r31, r0
     aa2:	81 e1       	ldi	r24, 0x11	; 17
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	0e 94 72 00 	call	0xe4	; 0xe4 <alu>
            break;
     aaa:	d2 c1       	rjmp	.+932    	; 0xe50 <__stack+0x551>
        }
        case CP: /* Compares content between two CPU registers. */
        {
            (void)alu(SUB, reg[op1], reg[op2], &sr); /* Return value is not stored. */
     aac:	e0 91 85 01 	lds	r30, 0x0185	; 0x800185 <op2>
     ab0:	f0 91 86 01 	lds	r31, 0x0186	; 0x800186 <op2+0x1>
     ab4:	ee 0f       	add	r30, r30
     ab6:	ff 1f       	adc	r31, r31
     ab8:	ee 0f       	add	r30, r30
     aba:	ff 1f       	adc	r31, r31
     abc:	ec 5f       	subi	r30, 0xFC	; 252
     abe:	fe 4f       	sbci	r31, 0xFE	; 254
     ac0:	00 81       	ld	r16, Z
     ac2:	11 81       	ldd	r17, Z+1	; 0x01
     ac4:	22 81       	ldd	r18, Z+2	; 0x02
     ac6:	33 81       	ldd	r19, Z+3	; 0x03
     ac8:	e0 91 89 01 	lds	r30, 0x0189	; 0x800189 <op1>
     acc:	f0 91 8a 01 	lds	r31, 0x018A	; 0x80018a <op1+0x1>
     ad0:	ee 0f       	add	r30, r30
     ad2:	ff 1f       	adc	r31, r31
     ad4:	ee 0f       	add	r30, r30
     ad6:	ff 1f       	adc	r31, r31
     ad8:	ec 5f       	subi	r30, 0xFC	; 252
     ada:	fe 4f       	sbci	r31, 0xFE	; 254
     adc:	40 81       	ld	r20, Z
     ade:	51 81       	ldd	r21, Z+1	; 0x01
     ae0:	62 81       	ldd	r22, Z+2	; 0x02
     ae2:	73 81       	ldd	r23, Z+3	; 0x03
     ae4:	0f 2e       	mov	r0, r31
     ae6:	fd e8       	ldi	r31, 0x8D	; 141
     ae8:	ef 2e       	mov	r14, r31
     aea:	f1 e0       	ldi	r31, 0x01	; 1
     aec:	ff 2e       	mov	r15, r31
     aee:	f0 2d       	mov	r31, r0
     af0:	81 e1       	ldi	r24, 0x11	; 17
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	0e 94 72 00 	call	0xe4	; 0xe4 <alu>
            break;
     af8:	ab c1       	rjmp	.+854    	; 0xe50 <__stack+0x551>
        }
        case JMP: /* Jumps to specified address. */
        {
            pc = op1;
     afa:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <op1>
     afe:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <op1+0x1>
     b02:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <pc+0x1>
     b06:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <pc>
            break;
     b0a:	a2 c1       	rjmp	.+836    	; 0xe50 <__stack+0x551>
        }
        case BREQ: /* Branches to specified address i Z flag is set. */
        {
            if (read(sr, Z)) pc = op1;
     b0c:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <sr>
     b10:	82 ff       	sbrs	r24, 2
     b12:	9e c1       	rjmp	.+828    	; 0xe50 <__stack+0x551>
     b14:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <op1>
     b18:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <op1+0x1>
     b1c:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <pc+0x1>
     b20:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <pc>
     b24:	95 c1       	rjmp	.+810    	; 0xe50 <__stack+0x551>
            break;
        }
        case BRNE: /* Branches to specified address if Z flag is cleared. */
        {
            if (!read(sr, Z)) pc = op1;
     b26:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <sr>
     b2a:	82 fd       	sbrc	r24, 2
     b2c:	91 c1       	rjmp	.+802    	; 0xe50 <__stack+0x551>
     b2e:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <op1>
     b32:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <op1+0x1>
     b36:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <pc+0x1>
     b3a:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <pc>
     b3e:	88 c1       	rjmp	.+784    	; 0xe50 <__stack+0x551>
            break;
        }
        case BRGE: /* Branches to specified address if S flag is cleared. */
        {
            if (!read(sr, S)) pc = op1;
     b40:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <sr>
     b44:	84 fd       	sbrc	r24, 4
     b46:	84 c1       	rjmp	.+776    	; 0xe50 <__stack+0x551>
     b48:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <op1>
     b4c:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <op1+0x1>
     b50:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <pc+0x1>
     b54:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <pc>
     b58:	7b c1       	rjmp	.+758    	; 0xe50 <__stack+0x551>
            break;
        }
        case BRGT: /* Branches to specified address if both S and Z flags are cleared. */
        {
            if (!read(sr, S) && !read(sr, Z)) pc = op1;
     b5a:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <sr>
     b5e:	84 fd       	sbrc	r24, 4
     b60:	77 c1       	rjmp	.+750    	; 0xe50 <__stack+0x551>
     b62:	82 fd       	sbrc	r24, 2
     b64:	75 c1       	rjmp	.+746    	; 0xe50 <__stack+0x551>
     b66:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <op1>
     b6a:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <op1+0x1>
     b6e:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <pc+0x1>
     b72:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <pc>
     b76:	6c c1       	rjmp	.+728    	; 0xe50 <__stack+0x551>
            break;
        }
        case BRLE: /* Branches to specified address if S or Z flag is set. */
        {
            if (read(sr, S) || read(sr, Z)) pc = op1;
     b78:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <sr>
     b7c:	84 fd       	sbrc	r24, 4
     b7e:	02 c0       	rjmp	.+4      	; 0xb84 <__stack+0x285>
     b80:	82 ff       	sbrs	r24, 2
     b82:	66 c1       	rjmp	.+716    	; 0xe50 <__stack+0x551>
     b84:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <op1>
     b88:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <op1+0x1>
     b8c:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <pc+0x1>
     b90:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <pc>
     b94:	5d c1       	rjmp	.+698    	; 0xe50 <__stack+0x551>
            break;
        }
        case BRLT: /* Branches to specified address if S flag is set. */
        {
            if (read(sr, S)) pc = op1;
     b96:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <sr>
     b9a:	84 ff       	sbrs	r24, 4
     b9c:	59 c1       	rjmp	.+690    	; 0xe50 <__stack+0x551>
     b9e:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <op1>
     ba2:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <op1+0x1>
     ba6:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <pc+0x1>
     baa:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <pc>
     bae:	50 c1       	rjmp	.+672    	; 0xe50 <__stack+0x551>
            break;
        }
        case CALL: /* Stores the return address on the stack and jumps to specified address. */
        {
            stack_push(pc);
     bb0:	60 91 8e 01 	lds	r22, 0x018E	; 0x80018e <pc>
     bb4:	70 91 8f 01 	lds	r23, 0x018F	; 0x80018f <pc+0x1>
     bb8:	80 e0       	ldi	r24, 0x00	; 0
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	0e 94 94 08 	call	0x1128	; 0x1128 <stack_push>
            pc = op1;
     bc0:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <op1>
     bc4:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <op1+0x1>
     bc8:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <pc+0x1>
     bcc:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <pc>
            break;
     bd0:	3f c1       	rjmp	.+638    	; 0xe50 <__stack+0x551>
        }
        case RET: /* Jumps to return address stored on the stack. */
        {
            pc = stack_pop();
     bd2:	0e 94 c8 08 	call	0x1190	; 0x1190 <stack_pop>
     bd6:	70 93 8f 01 	sts	0x018F, r23	; 0x80018f <pc+0x1>
     bda:	60 93 8e 01 	sts	0x018E, r22	; 0x80018e <pc>
            break;
     bde:	38 c1       	rjmp	.+624    	; 0xe50 <__stack+0x551>
        }
        case RETI: /* Pops the return address from the stack and sets the global interrupt flag. */
        {
            pc = stack_pop();
     be0:	0e 94 c8 08 	call	0x1190	; 0x1190 <stack_pop>
     be4:	70 93 8f 01 	sts	0x018F, r23	; 0x80018f <pc+0x1>
     be8:	60 93 8e 01 	sts	0x018E, r22	; 0x80018e <pc>
            set(sr, I);
     bec:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <sr>
     bf0:	80 62       	ori	r24, 0x20	; 32
     bf2:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <sr>
            break;
     bf6:	2c c1       	rjmp	.+600    	; 0xe50 <__stack+0x551>
        }
        case PUSH: /* Stores content of specified CPU register on the stack. */
        {
            stack_push(reg[op1]);
     bf8:	e0 91 89 01 	lds	r30, 0x0189	; 0x800189 <op1>
     bfc:	f0 91 8a 01 	lds	r31, 0x018A	; 0x80018a <op1+0x1>
     c00:	ee 0f       	add	r30, r30
     c02:	ff 1f       	adc	r31, r31
     c04:	ee 0f       	add	r30, r30
     c06:	ff 1f       	adc	r31, r31
     c08:	ec 5f       	subi	r30, 0xFC	; 252
     c0a:	fe 4f       	sbci	r31, 0xFE	; 254
     c0c:	60 81       	ld	r22, Z
     c0e:	71 81       	ldd	r23, Z+1	; 0x01
     c10:	82 81       	ldd	r24, Z+2	; 0x02
     c12:	93 81       	ldd	r25, Z+3	; 0x03
     c14:	0e 94 94 08 	call	0x1128	; 0x1128 <stack_push>
            break;
     c18:	1b c1       	rjmp	.+566    	; 0xe50 <__stack+0x551>
        }
        case POP: /* Loads value from the stack to a CPU-register. */
        {
            reg[op1] = stack_pop();
     c1a:	c0 91 89 01 	lds	r28, 0x0189	; 0x800189 <op1>
     c1e:	d0 91 8a 01 	lds	r29, 0x018A	; 0x80018a <op1+0x1>
     c22:	0e 94 c8 08 	call	0x1190	; 0x1190 <stack_pop>
     c26:	cc 0f       	add	r28, r28
     c28:	dd 1f       	adc	r29, r29
     c2a:	cc 0f       	add	r28, r28
     c2c:	dd 1f       	adc	r29, r29
     c2e:	cc 5f       	subi	r28, 0xFC	; 252
     c30:	de 4f       	sbci	r29, 0xFE	; 254
     c32:	68 83       	st	Y, r22
     c34:	79 83       	std	Y+1, r23	; 0x01
     c36:	8a 83       	std	Y+2, r24	; 0x02
     c38:	9b 83       	std	Y+3, r25	; 0x03
            break;
     c3a:	0a c1       	rjmp	.+532    	; 0xe50 <__stack+0x551>
        }
        case LSL: /* Shifts content of CPU register on step to the left. */
        {
            reg[op1] = reg[op1] << 1;
     c3c:	e0 91 89 01 	lds	r30, 0x0189	; 0x800189 <op1>
     c40:	f0 91 8a 01 	lds	r31, 0x018A	; 0x80018a <op1+0x1>
     c44:	ee 0f       	add	r30, r30
     c46:	ff 1f       	adc	r31, r31
     c48:	ee 0f       	add	r30, r30
     c4a:	ff 1f       	adc	r31, r31
     c4c:	ec 5f       	subi	r30, 0xFC	; 252
     c4e:	fe 4f       	sbci	r31, 0xFE	; 254
     c50:	80 81       	ld	r24, Z
     c52:	91 81       	ldd	r25, Z+1	; 0x01
     c54:	a2 81       	ldd	r26, Z+2	; 0x02
     c56:	b3 81       	ldd	r27, Z+3	; 0x03
     c58:	88 0f       	add	r24, r24
     c5a:	99 1f       	adc	r25, r25
     c5c:	aa 1f       	adc	r26, r26
     c5e:	bb 1f       	adc	r27, r27
     c60:	80 83       	st	Z, r24
     c62:	91 83       	std	Z+1, r25	; 0x01
     c64:	a2 83       	std	Z+2, r26	; 0x02
     c66:	b3 83       	std	Z+3, r27	; 0x03
            break;
     c68:	f3 c0       	rjmp	.+486    	; 0xe50 <__stack+0x551>
        }
        case LSR: /* Shifts content of CPU register on step to the right. */
        {
            reg[op1] = reg[op1] >> 1;
     c6a:	e0 91 89 01 	lds	r30, 0x0189	; 0x800189 <op1>
     c6e:	f0 91 8a 01 	lds	r31, 0x018A	; 0x80018a <op1+0x1>
     c72:	ee 0f       	add	r30, r30
     c74:	ff 1f       	adc	r31, r31
     c76:	ee 0f       	add	r30, r30
     c78:	ff 1f       	adc	r31, r31
     c7a:	ec 5f       	subi	r30, 0xFC	; 252
     c7c:	fe 4f       	sbci	r31, 0xFE	; 254
     c7e:	80 81       	ld	r24, Z
     c80:	91 81       	ldd	r25, Z+1	; 0x01
     c82:	a2 81       	ldd	r26, Z+2	; 0x02
     c84:	b3 81       	ldd	r27, Z+3	; 0x03
     c86:	b6 95       	lsr	r27
     c88:	a7 95       	ror	r26
     c8a:	97 95       	ror	r25
     c8c:	87 95       	ror	r24
     c8e:	80 83       	st	Z, r24
     c90:	91 83       	std	Z+1, r25	; 0x01
     c92:	a2 83       	std	Z+2, r26	; 0x02
     c94:	b3 83       	std	Z+3, r27	; 0x03
            break;
     c96:	dc c0       	rjmp	.+440    	; 0xe50 <__stack+0x551>
        }
        case SEI: /* Sets the global interrupt flag in the status register. */
        {
            set(sr, I);
     c98:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <sr>
     c9c:	80 62       	ori	r24, 0x20	; 32
     c9e:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <sr>
            break;
     ca2:	d6 c0       	rjmp	.+428    	; 0xe50 <__stack+0x551>
        }
        case CLI: /* Clears the global interrupt flag in the status register. */
        {
            clr(sr, I);
     ca4:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <sr>
     ca8:	8f 7d       	andi	r24, 0xDF	; 223
     caa:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <sr>
            break;
     cae:	d0 c0       	rjmp	.+416    	; 0xe50 <__stack+0x551>
        }
        case STIO:  /* Stores value to referenced I/O location (no offset). */
        {
            const uint16_t address = reg[op1] | (reg[op1 + 1] << 8);
     cb0:	20 91 89 01 	lds	r18, 0x0189	; 0x800189 <op1>
     cb4:	30 91 8a 01 	lds	r19, 0x018A	; 0x80018a <op1+0x1>
     cb8:	f9 01       	movw	r30, r18
     cba:	ee 0f       	add	r30, r30
     cbc:	ff 1f       	adc	r31, r31
     cbe:	ee 0f       	add	r30, r30
     cc0:	ff 1f       	adc	r31, r31
     cc2:	ec 5f       	subi	r30, 0xFC	; 252
     cc4:	fe 4f       	sbci	r31, 0xFE	; 254
     cc6:	80 81       	ld	r24, Z
     cc8:	91 81       	ldd	r25, Z+1	; 0x01
     cca:	a2 81       	ldd	r26, Z+2	; 0x02
     ccc:	b3 81       	ldd	r27, Z+3	; 0x03
     cce:	f9 01       	movw	r30, r18
     cd0:	31 96       	adiw	r30, 0x01	; 1
     cd2:	ee 0f       	add	r30, r30
     cd4:	ff 1f       	adc	r31, r31
     cd6:	ee 0f       	add	r30, r30
     cd8:	ff 1f       	adc	r31, r31
     cda:	ec 5f       	subi	r30, 0xFC	; 252
     cdc:	fe 4f       	sbci	r31, 0xFE	; 254
     cde:	40 81       	ld	r20, Z
     ce0:	51 81       	ldd	r21, Z+1	; 0x01
     ce2:	62 81       	ldd	r22, Z+2	; 0x02
     ce4:	73 81       	ldd	r23, Z+3	; 0x03
     ce6:	54 2f       	mov	r21, r20
     ce8:	44 27       	eor	r20, r20
     cea:	84 2b       	or	r24, r20
     cec:	95 2b       	or	r25, r21
            data_memory_write(address, reg[op2]);
     cee:	e0 91 85 01 	lds	r30, 0x0185	; 0x800185 <op2>
     cf2:	f0 91 86 01 	lds	r31, 0x0186	; 0x800186 <op2+0x1>
     cf6:	ee 0f       	add	r30, r30
     cf8:	ff 1f       	adc	r31, r31
     cfa:	ee 0f       	add	r30, r30
     cfc:	ff 1f       	adc	r31, r31
     cfe:	ec 5f       	subi	r30, 0xFC	; 252
     d00:	fe 4f       	sbci	r31, 0xFE	; 254
     d02:	40 81       	ld	r20, Z
     d04:	51 81       	ldd	r21, Z+1	; 0x01
     d06:	62 81       	ldd	r22, Z+2	; 0x02
     d08:	73 81       	ldd	r23, Z+3	; 0x03
     d0a:	0e 94 53 07 	call	0xea6	; 0xea6 <data_memory_write>
            break;
     d0e:	a0 c0       	rjmp	.+320    	; 0xe50 <__stack+0x551>
        }
        case LDIO: /* Loads value from referenced I/O location (no offset). */
        {
            const uint16_t address = reg[op2] | (reg[op2 + 1] << 8);
     d10:	40 91 85 01 	lds	r20, 0x0185	; 0x800185 <op2>
     d14:	50 91 86 01 	lds	r21, 0x0186	; 0x800186 <op2+0x1>
     d18:	60 91 87 01 	lds	r22, 0x0187	; 0x800187 <op2+0x2>
     d1c:	70 91 88 01 	lds	r23, 0x0188	; 0x800188 <op2+0x3>
     d20:	fa 01       	movw	r30, r20
     d22:	ee 0f       	add	r30, r30
     d24:	ff 1f       	adc	r31, r31
     d26:	ee 0f       	add	r30, r30
     d28:	ff 1f       	adc	r31, r31
     d2a:	ec 5f       	subi	r30, 0xFC	; 252
     d2c:	fe 4f       	sbci	r31, 0xFE	; 254
     d2e:	80 81       	ld	r24, Z
     d30:	91 81       	ldd	r25, Z+1	; 0x01
     d32:	a2 81       	ldd	r26, Z+2	; 0x02
     d34:	b3 81       	ldd	r27, Z+3	; 0x03
     d36:	4f 5f       	subi	r20, 0xFF	; 255
     d38:	5f 4f       	sbci	r21, 0xFF	; 255
     d3a:	6f 4f       	sbci	r22, 0xFF	; 255
     d3c:	7f 4f       	sbci	r23, 0xFF	; 255
     d3e:	44 0f       	add	r20, r20
     d40:	55 1f       	adc	r21, r21
     d42:	44 0f       	add	r20, r20
     d44:	55 1f       	adc	r21, r21
     d46:	fa 01       	movw	r30, r20
     d48:	ec 5f       	subi	r30, 0xFC	; 252
     d4a:	fe 4f       	sbci	r31, 0xFE	; 254
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	62 81       	ldd	r22, Z+2	; 0x02
     d52:	73 81       	ldd	r23, Z+3	; 0x03
     d54:	54 2f       	mov	r21, r20
     d56:	44 27       	eor	r20, r20
     d58:	84 2b       	or	r24, r20
     d5a:	95 2b       	or	r25, r21
            reg[op1] = data_memory_read(address);
     d5c:	c0 91 89 01 	lds	r28, 0x0189	; 0x800189 <op1>
     d60:	d0 91 8a 01 	lds	r29, 0x018A	; 0x80018a <op1+0x1>
     d64:	0e 94 68 07 	call	0xed0	; 0xed0 <data_memory_read>
     d68:	cc 0f       	add	r28, r28
     d6a:	dd 1f       	adc	r29, r29
     d6c:	cc 0f       	add	r28, r28
     d6e:	dd 1f       	adc	r29, r29
     d70:	cc 5f       	subi	r28, 0xFC	; 252
     d72:	de 4f       	sbci	r29, 0xFE	; 254
     d74:	68 83       	st	Y, r22
     d76:	79 83       	std	Y+1, r23	; 0x01
     d78:	8a 83       	std	Y+2, r24	; 0x02
     d7a:	9b 83       	std	Y+3, r25	; 0x03
            break;
     d7c:	69 c0       	rjmp	.+210    	; 0xe50 <__stack+0x551>
        }
        case ST: /* Stores value to referenced data location (offset = 256). */
        {
            const uint16_t address = reg[op1] | (reg[op1 + 1] << 8);
     d7e:	20 91 89 01 	lds	r18, 0x0189	; 0x800189 <op1>
     d82:	30 91 8a 01 	lds	r19, 0x018A	; 0x80018a <op1+0x1>
     d86:	f9 01       	movw	r30, r18
     d88:	ee 0f       	add	r30, r30
     d8a:	ff 1f       	adc	r31, r31
     d8c:	ee 0f       	add	r30, r30
     d8e:	ff 1f       	adc	r31, r31
     d90:	ec 5f       	subi	r30, 0xFC	; 252
     d92:	fe 4f       	sbci	r31, 0xFE	; 254
     d94:	80 81       	ld	r24, Z
     d96:	91 81       	ldd	r25, Z+1	; 0x01
     d98:	a2 81       	ldd	r26, Z+2	; 0x02
     d9a:	b3 81       	ldd	r27, Z+3	; 0x03
     d9c:	f9 01       	movw	r30, r18
     d9e:	31 96       	adiw	r30, 0x01	; 1
     da0:	ee 0f       	add	r30, r30
     da2:	ff 1f       	adc	r31, r31
     da4:	ee 0f       	add	r30, r30
     da6:	ff 1f       	adc	r31, r31
     da8:	ec 5f       	subi	r30, 0xFC	; 252
     daa:	fe 4f       	sbci	r31, 0xFE	; 254
     dac:	40 81       	ld	r20, Z
     dae:	51 81       	ldd	r21, Z+1	; 0x01
     db0:	62 81       	ldd	r22, Z+2	; 0x02
     db2:	73 81       	ldd	r23, Z+3	; 0x03
     db4:	54 2f       	mov	r21, r20
     db6:	44 27       	eor	r20, r20
     db8:	84 2b       	or	r24, r20
     dba:	95 2b       	or	r25, r21
            data_memory_write(address, reg[op2]);
     dbc:	e0 91 85 01 	lds	r30, 0x0185	; 0x800185 <op2>
     dc0:	f0 91 86 01 	lds	r31, 0x0186	; 0x800186 <op2+0x1>
     dc4:	ee 0f       	add	r30, r30
     dc6:	ff 1f       	adc	r31, r31
     dc8:	ee 0f       	add	r30, r30
     dca:	ff 1f       	adc	r31, r31
     dcc:	ec 5f       	subi	r30, 0xFC	; 252
     dce:	fe 4f       	sbci	r31, 0xFE	; 254
     dd0:	40 81       	ld	r20, Z
     dd2:	51 81       	ldd	r21, Z+1	; 0x01
     dd4:	62 81       	ldd	r22, Z+2	; 0x02
     dd6:	73 81       	ldd	r23, Z+3	; 0x03
     dd8:	0e 94 53 07 	call	0xea6	; 0xea6 <data_memory_write>
            break;
     ddc:	39 c0       	rjmp	.+114    	; 0xe50 <__stack+0x551>
        }
        case LD: /* Loads value from referenced data location (offset = 256). */
        {
            const uint16_t address = reg[op2] | (reg[op2 + 1] << 8);
     dde:	40 91 85 01 	lds	r20, 0x0185	; 0x800185 <op2>
     de2:	50 91 86 01 	lds	r21, 0x0186	; 0x800186 <op2+0x1>
     de6:	60 91 87 01 	lds	r22, 0x0187	; 0x800187 <op2+0x2>
     dea:	70 91 88 01 	lds	r23, 0x0188	; 0x800188 <op2+0x3>
     dee:	fa 01       	movw	r30, r20
     df0:	ee 0f       	add	r30, r30
     df2:	ff 1f       	adc	r31, r31
     df4:	ee 0f       	add	r30, r30
     df6:	ff 1f       	adc	r31, r31
     df8:	ec 5f       	subi	r30, 0xFC	; 252
     dfa:	fe 4f       	sbci	r31, 0xFE	; 254
     dfc:	80 81       	ld	r24, Z
     dfe:	91 81       	ldd	r25, Z+1	; 0x01
     e00:	a2 81       	ldd	r26, Z+2	; 0x02
     e02:	b3 81       	ldd	r27, Z+3	; 0x03
     e04:	4f 5f       	subi	r20, 0xFF	; 255
     e06:	5f 4f       	sbci	r21, 0xFF	; 255
     e08:	6f 4f       	sbci	r22, 0xFF	; 255
     e0a:	7f 4f       	sbci	r23, 0xFF	; 255
     e0c:	44 0f       	add	r20, r20
     e0e:	55 1f       	adc	r21, r21
     e10:	44 0f       	add	r20, r20
     e12:	55 1f       	adc	r21, r21
     e14:	fa 01       	movw	r30, r20
     e16:	ec 5f       	subi	r30, 0xFC	; 252
     e18:	fe 4f       	sbci	r31, 0xFE	; 254
     e1a:	40 81       	ld	r20, Z
     e1c:	51 81       	ldd	r21, Z+1	; 0x01
     e1e:	62 81       	ldd	r22, Z+2	; 0x02
     e20:	73 81       	ldd	r23, Z+3	; 0x03
     e22:	54 2f       	mov	r21, r20
     e24:	44 27       	eor	r20, r20
     e26:	84 2b       	or	r24, r20
     e28:	95 2b       	or	r25, r21
            reg[op1] = data_memory_read(address);
     e2a:	c0 91 89 01 	lds	r28, 0x0189	; 0x800189 <op1>
     e2e:	d0 91 8a 01 	lds	r29, 0x018A	; 0x80018a <op1+0x1>
     e32:	0e 94 68 07 	call	0xed0	; 0xed0 <data_memory_read>
     e36:	cc 0f       	add	r28, r28
     e38:	dd 1f       	adc	r29, r29
     e3a:	cc 0f       	add	r28, r28
     e3c:	dd 1f       	adc	r29, r29
     e3e:	cc 5f       	subi	r28, 0xFC	; 252
     e40:	de 4f       	sbci	r29, 0xFE	; 254
     e42:	68 83       	st	Y, r22
     e44:	79 83       	std	Y+1, r23	; 0x01
     e46:	8a 83       	std	Y+2, r24	; 0x02
     e48:	9b 83       	std	Y+3, r25	; 0x03
            break;
     e4a:	02 c0       	rjmp	.+4      	; 0xe50 <__stack+0x551>
        }
        default:
        {
            control_unit_reset(); /* System reset if error occurs. */
     e4c:	0e 94 03 02 	call	0x406	; 0x406 <control_unit_reset>
            break;
        }
        }

        state = CPU_STATE_FETCH;    /* Fetches next instruction during next clock cycle. */
     e50:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <state>
        check_for_irq();            /* Checks for interrupt request after each execute cycle. */
     e54:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <check_for_irq>
        break;
     e58:	02 c0       	rjmp	.+4      	; 0xe5e <__stack+0x55f>
    }
    default:                       /* System reset if error occurs. */
    {
        control_unit_reset();
     e5a:	0e 94 03 02 	call	0x406	; 0x406 <control_unit_reset>
        break;
    }
    }

    control_unit_io_update();
     e5e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <control_unit_io_update>
    monitor_interrupts();            /* Monitors interrupts each clock cycle. */
     e62:	0e 94 4f 01 	call	0x29e	; 0x29e <monitor_interrupts>
    return;
}
     e66:	df 91       	pop	r29
     e68:	cf 91       	pop	r28
     e6a:	1f 91       	pop	r17
     e6c:	0f 91       	pop	r16
     e6e:	ff 90       	pop	r15
     e70:	ef 90       	pop	r14
     e72:	08 95       	ret

00000e74 <data_memory_reset>:
/********************************************************************************
* data_memory_reset: Clears entire data memory.
********************************************************************************/
void data_memory_reset(void)
{
	for (uint32_t i = 0; i < DATA_MEMORY_ADDRESS_WIDTH; ++i)
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	dc 01       	movw	r26, r24
     e7a:	0e c0       	rjmp	.+28     	; 0xe98 <data_memory_reset+0x24>
	{
		data[i] = 0x00;
     e7c:	fc 01       	movw	r30, r24
     e7e:	ee 0f       	add	r30, r30
     e80:	ff 1f       	adc	r31, r31
     e82:	ee 0f       	add	r30, r30
     e84:	ff 1f       	adc	r31, r31
     e86:	e8 56       	subi	r30, 0x68	; 104
     e88:	fe 4f       	sbci	r31, 0xFE	; 254
     e8a:	10 82       	st	Z, r1
     e8c:	11 82       	std	Z+1, r1	; 0x01
     e8e:	12 82       	std	Z+2, r1	; 0x02
     e90:	13 82       	std	Z+3, r1	; 0x03
/********************************************************************************
* data_memory_reset: Clears entire data memory.
********************************************************************************/
void data_memory_reset(void)
{
	for (uint32_t i = 0; i < DATA_MEMORY_ADDRESS_WIDTH; ++i)
     e92:	01 96       	adiw	r24, 0x01	; 1
     e94:	a1 1d       	adc	r26, r1
     e96:	b1 1d       	adc	r27, r1
     e98:	8c 32       	cpi	r24, 0x2C	; 44
     e9a:	21 e0       	ldi	r18, 0x01	; 1
     e9c:	92 07       	cpc	r25, r18
     e9e:	a1 05       	cpc	r26, r1
     ea0:	b1 05       	cpc	r27, r1
     ea2:	60 f3       	brcs	.-40     	; 0xe7c <data_memory_reset+0x8>
	{
		data[i] = 0x00;
	}
	return;
}
     ea4:	08 95       	ret

00000ea6 <data_memory_write>:
*                    - value  : The 8-bit value to write to data memory.
********************************************************************************/
int data_memory_write(const uint16_t address,
                      const uint32_t value)
{
	if (address < DATA_MEMORY_ADDRESS_WIDTH)
     ea6:	8c 32       	cpi	r24, 0x2C	; 44
     ea8:	21 e0       	ldi	r18, 0x01	; 1
     eaa:	92 07       	cpc	r25, r18
     eac:	70 f4       	brcc	.+28     	; 0xeca <data_memory_write+0x24>
	{
		data[address] = value;
     eae:	88 0f       	add	r24, r24
     eb0:	99 1f       	adc	r25, r25
     eb2:	88 0f       	add	r24, r24
     eb4:	99 1f       	adc	r25, r25
     eb6:	fc 01       	movw	r30, r24
     eb8:	e8 56       	subi	r30, 0x68	; 104
     eba:	fe 4f       	sbci	r31, 0xFE	; 254
     ebc:	40 83       	st	Z, r20
     ebe:	51 83       	std	Z+1, r21	; 0x01
     ec0:	62 83       	std	Z+2, r22	; 0x02
     ec2:	73 83       	std	Z+3, r23	; 0x03
		return 0;
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	08 95       	ret
	}
	else
	{
		return 1;
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	90 e0       	ldi	r25, 0x00	; 0
	}
}
     ece:	08 95       	ret

00000ed0 <data_memory_read>:
*
*                   - address: Read location in data memory.
********************************************************************************/
uint32_t data_memory_read(const uint16_t address)
{
	if (address < DATA_MEMORY_ADDRESS_WIDTH)
     ed0:	8c 32       	cpi	r24, 0x2C	; 44
     ed2:	21 e0       	ldi	r18, 0x01	; 1
     ed4:	92 07       	cpc	r25, r18
     ed6:	60 f4       	brcc	.+24     	; 0xef0 <data_memory_read+0x20>
	{
		return data[address];
     ed8:	88 0f       	add	r24, r24
     eda:	99 1f       	adc	r25, r25
     edc:	88 0f       	add	r24, r24
     ede:	99 1f       	adc	r25, r25
     ee0:	fc 01       	movw	r30, r24
     ee2:	e8 56       	subi	r30, 0x68	; 104
     ee4:	fe 4f       	sbci	r31, 0xFE	; 254
     ee6:	60 81       	ld	r22, Z
     ee8:	71 81       	ldd	r23, Z+1	; 0x01
     eea:	82 81       	ldd	r24, Z+2	; 0x02
     eec:	93 81       	ldd	r25, Z+3	; 0x03
     eee:	08 95       	ret
	}
	else
	{
		return 0x00;
     ef0:	60 e0       	ldi	r22, 0x00	; 0
     ef2:	70 e0       	ldi	r23, 0x00	; 0
     ef4:	cb 01       	movw	r24, r22
	}
     ef6:	08 95       	ret

00000ef8 <main>:
#include "control_unit.h"

int main(void)
{
	control_unit_reset();
     ef8:	0e 94 03 02 	call	0x406	; 0x406 <control_unit_reset>
	
	while (1)
	{
		control_unit_run_next_state();
     efc:	0e 94 53 02 	call	0x4a6	; 0x4a6 <control_unit_run_next_state>
     f00:	fd cf       	rjmp	.-6      	; 0xefc <main+0x4>

00000f02 <program_memory_write>:
static uint64_t program_memory[PROGRAM_MEMORY_ADDRESS_WIDTH]; /* 0.75 kB program memory. */

void program_memory_write(void)
{
	static bool program_memory_initialized = false;
	if (program_memory_initialized) return;
     f02:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <program_memory_initialized.1982>
     f06:	81 11       	cpse	r24, r1
     f08:	cf c0       	rjmp	.+414    	; 0x10a8 <program_memory_write+0x1a6>
	
	 program_memory[0]  = join(JMP, main, 0x00);
     f0a:	e9 e4       	ldi	r30, 0x49	; 73
     f0c:	f6 e0       	ldi	r31, 0x06	; 6
     f0e:	10 82       	st	Z, r1
     f10:	11 82       	std	Z+1, r1	; 0x01
     f12:	12 82       	std	Z+2, r1	; 0x02
     f14:	13 82       	std	Z+3, r1	; 0x03
     f16:	64 e0       	ldi	r22, 0x04	; 4
     f18:	64 83       	std	Z+4, r22	; 0x04
     f1a:	15 82       	std	Z+5, r1	; 0x05
     f1c:	86 e1       	ldi	r24, 0x16	; 22
     f1e:	86 83       	std	Z+6, r24	; 0x06
     f20:	17 82       	std	Z+7, r1	; 0x07
	 program_memory[1]  = join(NOP, 0x00, 0x00);
     f22:	10 86       	std	Z+8, r1	; 0x08
     f24:	11 86       	std	Z+9, r1	; 0x09
     f26:	12 86       	std	Z+10, r1	; 0x0a
     f28:	13 86       	std	Z+11, r1	; 0x0b
     f2a:	14 86       	std	Z+12, r1	; 0x0c
     f2c:	15 86       	std	Z+13, r1	; 0x0d
     f2e:	16 86       	std	Z+14, r1	; 0x0e
     f30:	17 86       	std	Z+15, r1	; 0x0f
	 program_memory[2]  = join(JMP, ISR_PCINT, 0x00);
     f32:	10 8a       	std	Z+16, r1	; 0x10
     f34:	11 8a       	std	Z+17, r1	; 0x11
     f36:	12 8a       	std	Z+18, r1	; 0x12
     f38:	13 8a       	std	Z+19, r1	; 0x13
     f3a:	9f e0       	ldi	r25, 0x0F	; 15
     f3c:	94 8b       	std	Z+20, r25	; 0x14
     f3e:	15 8a       	std	Z+21, r1	; 0x15
     f40:	86 8b       	std	Z+22, r24	; 0x16
     f42:	17 8a       	std	Z+23, r1	; 0x17
	 program_memory[3]  = join(NOP, 0x00, 0x00);
     f44:	10 8e       	std	Z+24, r1	; 0x18
     f46:	11 8e       	std	Z+25, r1	; 0x19
     f48:	12 8e       	std	Z+26, r1	; 0x1a
     f4a:	13 8e       	std	Z+27, r1	; 0x1b
     f4c:	14 8e       	std	Z+28, r1	; 0x1c
     f4e:	15 8e       	std	Z+29, r1	; 0x1d
     f50:	16 8e       	std	Z+30, r1	; 0x1e
     f52:	17 8e       	std	Z+31, r1	; 0x1f

	 program_memory[4]  = join(CALL, setup, 0x00);
     f54:	10 a2       	std	Z+32, r1	; 0x20
     f56:	11 a2       	std	Z+33, r1	; 0x21
     f58:	12 a2       	std	Z+34, r1	; 0x22
     f5a:	13 a2       	std	Z+35, r1	; 0x23
     f5c:	96 e0       	ldi	r25, 0x06	; 6
     f5e:	94 a3       	std	Z+36, r25	; 0x24
     f60:	15 a2       	std	Z+37, r1	; 0x25
     f62:	9d e1       	ldi	r25, 0x1D	; 29
     f64:	96 a3       	std	Z+38, r25	; 0x26
     f66:	17 a2       	std	Z+39, r1	; 0x27
	 program_memory[5]  = join(JMP, main_loop, 0x00);
     f68:	10 a6       	std	Z+40, r1	; 0x28
     f6a:	11 a6       	std	Z+41, r1	; 0x29
     f6c:	12 a6       	std	Z+42, r1	; 0x2a
     f6e:	13 a6       	std	Z+43, r1	; 0x2b
     f70:	75 e0       	ldi	r23, 0x05	; 5
     f72:	74 a7       	std	Z+44, r23	; 0x2c
     f74:	15 a6       	std	Z+45, r1	; 0x2d
     f76:	86 a7       	std	Z+46, r24	; 0x2e
     f78:	17 a6       	std	Z+47, r1	; 0x2f
	 program_memory[6]  = join(LDI, R16, (1 << LED1));
     f7a:	10 aa       	std	Z+48, r1	; 0x30
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	81 ab       	std	Z+49, r24	; 0x31
     f80:	12 aa       	std	Z+50, r1	; 0x32
     f82:	13 aa       	std	Z+51, r1	; 0x33
     f84:	30 e1       	ldi	r19, 0x10	; 16
     f86:	34 ab       	std	Z+52, r19	; 0x34
     f88:	15 aa       	std	Z+53, r1	; 0x35
     f8a:	86 ab       	std	Z+54, r24	; 0x36
     f8c:	17 aa       	std	Z+55, r1	; 0x37
	 program_memory[7]  = join(OUT, DDRA, R16);
     f8e:	30 af       	std	Z+56, r19	; 0x38
     f90:	11 ae       	std	Z+57, r1	; 0x39
     f92:	12 ae       	std	Z+58, r1	; 0x3a
     f94:	13 ae       	std	Z+59, r1	; 0x3b
     f96:	14 ae       	std	Z+60, r1	; 0x3c
     f98:	15 ae       	std	Z+61, r1	; 0x3d
     f9a:	93 e0       	ldi	r25, 0x03	; 3
     f9c:	96 af       	std	Z+62, r25	; 0x3e
     f9e:	17 ae       	std	Z+63, r1	; 0x3f
	 program_memory[8]  = join(LDI, R17, (1 << BUTTON1));
     fa0:	e9 e8       	ldi	r30, 0x89	; 137
     fa2:	f6 e0       	ldi	r31, 0x06	; 6
     fa4:	10 82       	st	Z, r1
     fa6:	50 e2       	ldi	r21, 0x20	; 32
     fa8:	51 83       	std	Z+1, r21	; 0x01
     faa:	12 82       	std	Z+2, r1	; 0x02
     fac:	13 82       	std	Z+3, r1	; 0x03
     fae:	41 e1       	ldi	r20, 0x11	; 17
     fb0:	44 83       	std	Z+4, r20	; 0x04
     fb2:	15 82       	std	Z+5, r1	; 0x05
     fb4:	86 83       	std	Z+6, r24	; 0x06
     fb6:	17 82       	std	Z+7, r1	; 0x07
	 program_memory[9]  = join(OUT, PORTA, R17);
     fb8:	e1 e9       	ldi	r30, 0x91	; 145
     fba:	f6 e0       	ldi	r31, 0x06	; 6
     fbc:	40 83       	st	Z, r20
     fbe:	11 82       	std	Z+1, r1	; 0x01
     fc0:	12 82       	std	Z+2, r1	; 0x02
     fc2:	13 82       	std	Z+3, r1	; 0x03
     fc4:	84 83       	std	Z+4, r24	; 0x04
     fc6:	15 82       	std	Z+5, r1	; 0x05
     fc8:	96 83       	std	Z+6, r25	; 0x06
     fca:	17 82       	std	Z+7, r1	; 0x07
	 program_memory[10] = join(SEI, 0x00, 0x00);
     fcc:	e9 e9       	ldi	r30, 0x99	; 153
     fce:	f6 e0       	ldi	r31, 0x06	; 6
     fd0:	10 82       	st	Z, r1
     fd2:	11 82       	std	Z+1, r1	; 0x01
     fd4:	12 82       	std	Z+2, r1	; 0x02
     fd6:	13 82       	std	Z+3, r1	; 0x03
     fd8:	14 82       	std	Z+4, r1	; 0x04
     fda:	15 82       	std	Z+5, r1	; 0x05
     fdc:	24 e2       	ldi	r18, 0x24	; 36
     fde:	26 83       	std	Z+6, r18	; 0x06
     fe0:	17 82       	std	Z+7, r1	; 0x07
	 program_memory[11] = join(LDI, R24, (1 << PCIEA));
     fe2:	e1 ea       	ldi	r30, 0xA1	; 161
     fe4:	f6 e0       	ldi	r31, 0x06	; 6
     fe6:	80 83       	st	Z, r24
     fe8:	11 82       	std	Z+1, r1	; 0x01
     fea:	12 82       	std	Z+2, r1	; 0x02
     fec:	13 82       	std	Z+3, r1	; 0x03
     fee:	28 e1       	ldi	r18, 0x18	; 24
     ff0:	24 83       	std	Z+4, r18	; 0x04
     ff2:	15 82       	std	Z+5, r1	; 0x05
     ff4:	86 83       	std	Z+6, r24	; 0x06
     ff6:	17 82       	std	Z+7, r1	; 0x07
	 program_memory[12] = join(OUT, ICR, R24);
     ff8:	e9 ea       	ldi	r30, 0xA9	; 169
     ffa:	f6 e0       	ldi	r31, 0x06	; 6
     ffc:	20 83       	st	Z, r18
     ffe:	11 82       	std	Z+1, r1	; 0x01
    1000:	12 82       	std	Z+2, r1	; 0x02
    1002:	13 82       	std	Z+3, r1	; 0x03
    1004:	94 83       	std	Z+4, r25	; 0x04
    1006:	15 82       	std	Z+5, r1	; 0x05
    1008:	96 83       	std	Z+6, r25	; 0x06
    100a:	17 82       	std	Z+7, r1	; 0x07
	 program_memory[13] = join(OUT, PCMSKA, R17);
    100c:	e1 eb       	ldi	r30, 0xB1	; 177
    100e:	f6 e0       	ldi	r31, 0x06	; 6
    1010:	40 83       	st	Z, r20
    1012:	11 82       	std	Z+1, r1	; 0x01
    1014:	12 82       	std	Z+2, r1	; 0x02
    1016:	13 82       	std	Z+3, r1	; 0x03
    1018:	74 83       	std	Z+4, r23	; 0x04
    101a:	15 82       	std	Z+5, r1	; 0x05
    101c:	96 83       	std	Z+6, r25	; 0x06
    101e:	17 82       	std	Z+7, r1	; 0x07
	 program_memory[14] = join(RET, 0x00, 0x00);
    1020:	e9 eb       	ldi	r30, 0xB9	; 185
    1022:	f6 e0       	ldi	r31, 0x06	; 6
    1024:	10 82       	st	Z, r1
    1026:	11 82       	std	Z+1, r1	; 0x01
    1028:	12 82       	std	Z+2, r1	; 0x02
    102a:	13 82       	std	Z+3, r1	; 0x03
    102c:	14 82       	std	Z+4, r1	; 0x04
    102e:	15 82       	std	Z+5, r1	; 0x05
    1030:	4e e1       	ldi	r20, 0x1E	; 30
    1032:	46 83       	std	Z+6, r20	; 0x06
    1034:	17 82       	std	Z+7, r1	; 0x07

	 program_memory[15] = join(IN, R24, PINA);
    1036:	e1 ec       	ldi	r30, 0xC1	; 193
    1038:	f6 e0       	ldi	r31, 0x06	; 6
    103a:	42 e0       	ldi	r20, 0x02	; 2
    103c:	40 83       	st	Z, r20
    103e:	11 82       	std	Z+1, r1	; 0x01
    1040:	12 82       	std	Z+2, r1	; 0x02
    1042:	13 82       	std	Z+3, r1	; 0x03
    1044:	24 83       	std	Z+4, r18	; 0x04
    1046:	15 82       	std	Z+5, r1	; 0x05
    1048:	66 83       	std	Z+6, r22	; 0x06
    104a:	17 82       	std	Z+7, r1	; 0x07
	 program_memory[16] = join(ANDI, R24, (1 << BUTTON1));
    104c:	e9 ec       	ldi	r30, 0xC9	; 201
    104e:	f6 e0       	ldi	r31, 0x06	; 6
    1050:	10 82       	st	Z, r1
    1052:	51 83       	std	Z+1, r21	; 0x01
    1054:	12 82       	std	Z+2, r1	; 0x02
    1056:	13 82       	std	Z+3, r1	; 0x03
    1058:	24 83       	std	Z+4, r18	; 0x04
    105a:	15 82       	std	Z+5, r1	; 0x05
    105c:	29 e0       	ldi	r18, 0x09	; 9
    105e:	26 83       	std	Z+6, r18	; 0x06
    1060:	17 82       	std	Z+7, r1	; 0x07
	 program_memory[17] = join(BREQ, ISR_PCINT_end, 0x00);
    1062:	e1 ed       	ldi	r30, 0xD1	; 209
    1064:	f6 e0       	ldi	r31, 0x06	; 6
    1066:	10 82       	st	Z, r1
    1068:	11 82       	std	Z+1, r1	; 0x01
    106a:	12 82       	std	Z+2, r1	; 0x02
    106c:	13 82       	std	Z+3, r1	; 0x03
    106e:	23 e1       	ldi	r18, 0x13	; 19
    1070:	24 83       	std	Z+4, r18	; 0x04
    1072:	15 82       	std	Z+5, r1	; 0x05
    1074:	27 e1       	ldi	r18, 0x17	; 23
    1076:	26 83       	std	Z+6, r18	; 0x06
    1078:	17 82       	std	Z+7, r1	; 0x07
	 program_memory[18] = join(OUT, PINA, R16);
    107a:	e9 ed       	ldi	r30, 0xD9	; 217
    107c:	f6 e0       	ldi	r31, 0x06	; 6
    107e:	30 83       	st	Z, r19
    1080:	11 82       	std	Z+1, r1	; 0x01
    1082:	12 82       	std	Z+2, r1	; 0x02
    1084:	13 82       	std	Z+3, r1	; 0x03
    1086:	44 83       	std	Z+4, r20	; 0x04
    1088:	15 82       	std	Z+5, r1	; 0x05
    108a:	96 83       	std	Z+6, r25	; 0x06
    108c:	17 82       	std	Z+7, r1	; 0x07
	 program_memory[19] = join(RETI, 0x00, 0x00);
    108e:	e1 ee       	ldi	r30, 0xE1	; 225
    1090:	f6 e0       	ldi	r31, 0x06	; 6
    1092:	10 82       	st	Z, r1
    1094:	11 82       	std	Z+1, r1	; 0x01
    1096:	12 82       	std	Z+2, r1	; 0x02
    1098:	13 82       	std	Z+3, r1	; 0x03
    109a:	14 82       	std	Z+4, r1	; 0x04
    109c:	15 82       	std	Z+5, r1	; 0x05
    109e:	9f e1       	ldi	r25, 0x1F	; 31
    10a0:	96 83       	std	Z+6, r25	; 0x06
    10a2:	17 82       	std	Z+7, r1	; 0x07

	 program_memory_initialized = true;
    10a4:	80 93 48 06 	sts	0x0648, r24	; 0x800648 <program_memory_initialized.1982>
    10a8:	08 95       	ret

000010aa <program_memory_read>:
*
*                      - address: Address to instruction in program memory.
********************************************************************************/
uint64_t program_memory_read(const uint16_t address)
{
	if (address < PROGRAM_MEMORY_ADDRESS_WIDTH)
    10aa:	89 31       	cpi	r24, 0x19	; 25
    10ac:	91 05       	cpc	r25, r1
    10ae:	90 f4       	brcc	.+36     	; 0x10d4 <program_memory_read+0x2a>
	{
		return program_memory[address];
    10b0:	88 0f       	add	r24, r24
    10b2:	99 1f       	adc	r25, r25
    10b4:	88 0f       	add	r24, r24
    10b6:	99 1f       	adc	r25, r25
    10b8:	88 0f       	add	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	fc 01       	movw	r30, r24
    10be:	e7 5b       	subi	r30, 0xB7	; 183
    10c0:	f9 4f       	sbci	r31, 0xF9	; 249
    10c2:	20 81       	ld	r18, Z
    10c4:	31 81       	ldd	r19, Z+1	; 0x01
    10c6:	42 81       	ldd	r20, Z+2	; 0x02
    10c8:	53 81       	ldd	r21, Z+3	; 0x03
    10ca:	64 81       	ldd	r22, Z+4	; 0x04
    10cc:	75 81       	ldd	r23, Z+5	; 0x05
    10ce:	86 81       	ldd	r24, Z+6	; 0x06
    10d0:	97 81       	ldd	r25, Z+7	; 0x07
    10d2:	08 95       	ret
	}
	else
	{
		return 0x00;
    10d4:	20 e0       	ldi	r18, 0x00	; 0
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	40 e0       	ldi	r20, 0x00	; 0
    10da:	50 e0       	ldi	r21, 0x00	; 0
    10dc:	60 e0       	ldi	r22, 0x00	; 0
    10de:	70 e0       	ldi	r23, 0x00	; 0
    10e0:	80 e0       	ldi	r24, 0x00	; 0
    10e2:	90 e0       	ldi	r25, 0x00	; 0
	}
}
    10e4:	08 95       	ret

000010e6 <stack_reset>:
* stack_reset: Clears content on the entire stack and sets the stack pointer
*              to the top of the stack.
********************************************************************************/
void stack_reset(void)
{
	for (uint32_t i = 0; i < STACK_ADDRESS_WIDTH; ++i)
    10e6:	80 e0       	ldi	r24, 0x00	; 0
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	dc 01       	movw	r26, r24
    10ec:	0e c0       	rjmp	.+28     	; 0x110a <stack_reset+0x24>
	{
		stack[i] = 0;
    10ee:	fc 01       	movw	r30, r24
    10f0:	ee 0f       	add	r30, r30
    10f2:	ff 1f       	adc	r31, r31
    10f4:	ee 0f       	add	r30, r30
    10f6:	ff 1f       	adc	r31, r31
    10f8:	ec 5e       	subi	r30, 0xEC	; 236
    10fa:	f8 4f       	sbci	r31, 0xF8	; 248
    10fc:	10 82       	st	Z, r1
    10fe:	11 82       	std	Z+1, r1	; 0x01
    1100:	12 82       	std	Z+2, r1	; 0x02
    1102:	13 82       	std	Z+3, r1	; 0x03
* stack_reset: Clears content on the entire stack and sets the stack pointer
*              to the top of the stack.
********************************************************************************/
void stack_reset(void)
{
	for (uint32_t i = 0; i < STACK_ADDRESS_WIDTH; ++i)
    1104:	01 96       	adiw	r24, 0x01	; 1
    1106:	a1 1d       	adc	r26, r1
    1108:	b1 1d       	adc	r27, r1
    110a:	84 36       	cpi	r24, 0x64	; 100
    110c:	91 05       	cpc	r25, r1
    110e:	a1 05       	cpc	r26, r1
    1110:	b1 05       	cpc	r27, r1
    1112:	68 f3       	brcs	.-38     	; 0x10ee <stack_reset+0x8>
	{
		stack[i] = 0;
	}

	sp = STACK_ADDRESS_WIDTH - 1;
    1114:	83 e6       	ldi	r24, 0x63	; 99
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	90 93 13 07 	sts	0x0713, r25	; 0x800713 <sp+0x1>
    111c:	80 93 12 07 	sts	0x0712, r24	; 0x800712 <sp>
	stack_empty = true;
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <stack_empty>
    1126:	08 95       	ret

00001128 <stack_push>:
*
*             - value: 32 bit value to push to the stack.
********************************************************************************/
int stack_push(const uint32_t value)
{
	if (sp == 0)
    1128:	40 91 12 07 	lds	r20, 0x0712	; 0x800712 <sp>
    112c:	50 91 13 07 	lds	r21, 0x0713	; 0x800713 <sp+0x1>
    1130:	41 15       	cp	r20, r1
    1132:	51 05       	cpc	r21, r1
    1134:	51 f1       	breq	.+84     	; 0x118a <stack_push+0x62>
	{
		return 1;
	}
	else
	{
		if (stack_empty)
    1136:	20 91 11 07 	lds	r18, 0x0711	; 0x800711 <stack_empty>
    113a:	22 23       	and	r18, r18
    113c:	89 f0       	breq	.+34     	; 0x1160 <stack_push+0x38>
		{
			stack[sp] = value;
    113e:	9a 01       	movw	r18, r20
    1140:	22 0f       	add	r18, r18
    1142:	33 1f       	adc	r19, r19
    1144:	22 0f       	add	r18, r18
    1146:	33 1f       	adc	r19, r19
    1148:	f9 01       	movw	r30, r18
    114a:	ec 5e       	subi	r30, 0xEC	; 236
    114c:	f8 4f       	sbci	r31, 0xF8	; 248
    114e:	60 83       	st	Z, r22
    1150:	71 83       	std	Z+1, r23	; 0x01
    1152:	82 83       	std	Z+2, r24	; 0x02
    1154:	93 83       	std	Z+3, r25	; 0x03
			stack_empty = false;
    1156:	10 92 11 07 	sts	0x0711, r1	; 0x800711 <stack_empty>
		}
		else
		{
			stack[--sp] = value;
		}
		return 0;
    115a:	80 e0       	ldi	r24, 0x00	; 0
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	08 95       	ret
			stack[sp] = value;
			stack_empty = false;
		}
		else
		{
			stack[--sp] = value;
    1160:	9a 01       	movw	r18, r20
    1162:	21 50       	subi	r18, 0x01	; 1
    1164:	31 09       	sbc	r19, r1
    1166:	30 93 13 07 	sts	0x0713, r19	; 0x800713 <sp+0x1>
    116a:	20 93 12 07 	sts	0x0712, r18	; 0x800712 <sp>
    116e:	22 0f       	add	r18, r18
    1170:	33 1f       	adc	r19, r19
    1172:	22 0f       	add	r18, r18
    1174:	33 1f       	adc	r19, r19
    1176:	f9 01       	movw	r30, r18
    1178:	ec 5e       	subi	r30, 0xEC	; 236
    117a:	f8 4f       	sbci	r31, 0xF8	; 248
    117c:	60 83       	st	Z, r22
    117e:	71 83       	std	Z+1, r23	; 0x01
    1180:	82 83       	std	Z+2, r24	; 0x02
    1182:	93 83       	std	Z+3, r25	; 0x03
		}
		return 0;
    1184:	80 e0       	ldi	r24, 0x00	; 0
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	08 95       	ret
********************************************************************************/
int stack_push(const uint32_t value)
{
	if (sp == 0)
	{
		return 1;
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	90 e0       	ldi	r25, 0x00	; 0
		{
			stack[--sp] = value;
		}
		return 0;
	}
}
    118e:	08 95       	ret

00001190 <stack_pop>:
* stack_pop: Returns 32 bit value popped from the stack. If the stack is empty,
*            the value 0x00 is returned.
********************************************************************************/
uint32_t stack_pop(void)
{
	if (stack_empty)
    1190:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <stack_empty>
    1194:	81 11       	cpse	r24, r1
    1196:	29 c0       	rjmp	.+82     	; 0x11ea <stack_pop+0x5a>
	{
		return 0;
	}
	else
	{
		if (sp < STACK_ADDRESS_WIDTH - 1)
    1198:	80 91 12 07 	lds	r24, 0x0712	; 0x800712 <sp>
    119c:	90 91 13 07 	lds	r25, 0x0713	; 0x800713 <sp+0x1>
    11a0:	83 36       	cpi	r24, 0x63	; 99
    11a2:	91 05       	cpc	r25, r1
    11a4:	98 f4       	brcc	.+38     	; 0x11cc <stack_pop+0x3c>
		{
			return stack[sp++];
    11a6:	9c 01       	movw	r18, r24
    11a8:	2f 5f       	subi	r18, 0xFF	; 255
    11aa:	3f 4f       	sbci	r19, 0xFF	; 255
    11ac:	30 93 13 07 	sts	0x0713, r19	; 0x800713 <sp+0x1>
    11b0:	20 93 12 07 	sts	0x0712, r18	; 0x800712 <sp>
    11b4:	88 0f       	add	r24, r24
    11b6:	99 1f       	adc	r25, r25
    11b8:	88 0f       	add	r24, r24
    11ba:	99 1f       	adc	r25, r25
    11bc:	fc 01       	movw	r30, r24
    11be:	ec 5e       	subi	r30, 0xEC	; 236
    11c0:	f8 4f       	sbci	r31, 0xF8	; 248
    11c2:	60 81       	ld	r22, Z
    11c4:	71 81       	ldd	r23, Z+1	; 0x01
    11c6:	82 81       	ldd	r24, Z+2	; 0x02
    11c8:	93 81       	ldd	r25, Z+3	; 0x03
    11ca:	08 95       	ret
		}
		else
		{
			stack_empty = true;
    11cc:	21 e0       	ldi	r18, 0x01	; 1
    11ce:	20 93 11 07 	sts	0x0711, r18	; 0x800711 <stack_empty>
			return stack[sp];
    11d2:	88 0f       	add	r24, r24
    11d4:	99 1f       	adc	r25, r25
    11d6:	88 0f       	add	r24, r24
    11d8:	99 1f       	adc	r25, r25
    11da:	fc 01       	movw	r30, r24
    11dc:	ec 5e       	subi	r30, 0xEC	; 236
    11de:	f8 4f       	sbci	r31, 0xF8	; 248
    11e0:	60 81       	ld	r22, Z
    11e2:	71 81       	ldd	r23, Z+1	; 0x01
    11e4:	82 81       	ldd	r24, Z+2	; 0x02
    11e6:	93 81       	ldd	r25, Z+3	; 0x03
    11e8:	08 95       	ret
********************************************************************************/
uint32_t stack_pop(void)
{
	if (stack_empty)
	{
		return 0;
    11ea:	60 e0       	ldi	r22, 0x00	; 0
    11ec:	70 e0       	ldi	r23, 0x00	; 0
    11ee:	cb 01       	movw	r24, r22
		{
			stack_empty = true;
			return stack[sp];
		}
	}
}
    11f0:	08 95       	ret

000011f2 <__subsf3>:
    11f2:	50 58       	subi	r21, 0x80	; 128

000011f4 <__addsf3>:
    11f4:	bb 27       	eor	r27, r27
    11f6:	aa 27       	eor	r26, r26
    11f8:	0e 94 11 09 	call	0x1222	; 0x1222 <__addsf3x>
    11fc:	0c 94 06 0a 	jmp	0x140c	; 0x140c <__fp_round>
    1200:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__fp_pscA>
    1204:	38 f0       	brcs	.+14     	; 0x1214 <__addsf3+0x20>
    1206:	0e 94 ff 09 	call	0x13fe	; 0x13fe <__fp_pscB>
    120a:	20 f0       	brcs	.+8      	; 0x1214 <__addsf3+0x20>
    120c:	39 f4       	brne	.+14     	; 0x121c <__addsf3+0x28>
    120e:	9f 3f       	cpi	r25, 0xFF	; 255
    1210:	19 f4       	brne	.+6      	; 0x1218 <__addsf3+0x24>
    1212:	26 f4       	brtc	.+8      	; 0x121c <__addsf3+0x28>
    1214:	0c 94 e5 09 	jmp	0x13ca	; 0x13ca <__fp_nan>
    1218:	0e f4       	brtc	.+2      	; 0x121c <__addsf3+0x28>
    121a:	e0 95       	com	r30
    121c:	e7 fb       	bst	r30, 7
    121e:	0c 94 df 09 	jmp	0x13be	; 0x13be <__fp_inf>

00001222 <__addsf3x>:
    1222:	e9 2f       	mov	r30, r25
    1224:	0e 94 17 0a 	call	0x142e	; 0x142e <__fp_split3>
    1228:	58 f3       	brcs	.-42     	; 0x1200 <__addsf3+0xc>
    122a:	ba 17       	cp	r27, r26
    122c:	62 07       	cpc	r22, r18
    122e:	73 07       	cpc	r23, r19
    1230:	84 07       	cpc	r24, r20
    1232:	95 07       	cpc	r25, r21
    1234:	20 f0       	brcs	.+8      	; 0x123e <__addsf3x+0x1c>
    1236:	79 f4       	brne	.+30     	; 0x1256 <__addsf3x+0x34>
    1238:	a6 f5       	brtc	.+104    	; 0x12a2 <__addsf3x+0x80>
    123a:	0c 94 39 0a 	jmp	0x1472	; 0x1472 <__fp_zero>
    123e:	0e f4       	brtc	.+2      	; 0x1242 <__addsf3x+0x20>
    1240:	e0 95       	com	r30
    1242:	0b 2e       	mov	r0, r27
    1244:	ba 2f       	mov	r27, r26
    1246:	a0 2d       	mov	r26, r0
    1248:	0b 01       	movw	r0, r22
    124a:	b9 01       	movw	r22, r18
    124c:	90 01       	movw	r18, r0
    124e:	0c 01       	movw	r0, r24
    1250:	ca 01       	movw	r24, r20
    1252:	a0 01       	movw	r20, r0
    1254:	11 24       	eor	r1, r1
    1256:	ff 27       	eor	r31, r31
    1258:	59 1b       	sub	r21, r25
    125a:	99 f0       	breq	.+38     	; 0x1282 <__addsf3x+0x60>
    125c:	59 3f       	cpi	r21, 0xF9	; 249
    125e:	50 f4       	brcc	.+20     	; 0x1274 <__addsf3x+0x52>
    1260:	50 3e       	cpi	r21, 0xE0	; 224
    1262:	68 f1       	brcs	.+90     	; 0x12be <__addsf3x+0x9c>
    1264:	1a 16       	cp	r1, r26
    1266:	f0 40       	sbci	r31, 0x00	; 0
    1268:	a2 2f       	mov	r26, r18
    126a:	23 2f       	mov	r18, r19
    126c:	34 2f       	mov	r19, r20
    126e:	44 27       	eor	r20, r20
    1270:	58 5f       	subi	r21, 0xF8	; 248
    1272:	f3 cf       	rjmp	.-26     	; 0x125a <__addsf3x+0x38>
    1274:	46 95       	lsr	r20
    1276:	37 95       	ror	r19
    1278:	27 95       	ror	r18
    127a:	a7 95       	ror	r26
    127c:	f0 40       	sbci	r31, 0x00	; 0
    127e:	53 95       	inc	r21
    1280:	c9 f7       	brne	.-14     	; 0x1274 <__addsf3x+0x52>
    1282:	7e f4       	brtc	.+30     	; 0x12a2 <__addsf3x+0x80>
    1284:	1f 16       	cp	r1, r31
    1286:	ba 0b       	sbc	r27, r26
    1288:	62 0b       	sbc	r22, r18
    128a:	73 0b       	sbc	r23, r19
    128c:	84 0b       	sbc	r24, r20
    128e:	ba f0       	brmi	.+46     	; 0x12be <__addsf3x+0x9c>
    1290:	91 50       	subi	r25, 0x01	; 1
    1292:	a1 f0       	breq	.+40     	; 0x12bc <__addsf3x+0x9a>
    1294:	ff 0f       	add	r31, r31
    1296:	bb 1f       	adc	r27, r27
    1298:	66 1f       	adc	r22, r22
    129a:	77 1f       	adc	r23, r23
    129c:	88 1f       	adc	r24, r24
    129e:	c2 f7       	brpl	.-16     	; 0x1290 <__addsf3x+0x6e>
    12a0:	0e c0       	rjmp	.+28     	; 0x12be <__addsf3x+0x9c>
    12a2:	ba 0f       	add	r27, r26
    12a4:	62 1f       	adc	r22, r18
    12a6:	73 1f       	adc	r23, r19
    12a8:	84 1f       	adc	r24, r20
    12aa:	48 f4       	brcc	.+18     	; 0x12be <__addsf3x+0x9c>
    12ac:	87 95       	ror	r24
    12ae:	77 95       	ror	r23
    12b0:	67 95       	ror	r22
    12b2:	b7 95       	ror	r27
    12b4:	f7 95       	ror	r31
    12b6:	9e 3f       	cpi	r25, 0xFE	; 254
    12b8:	08 f0       	brcs	.+2      	; 0x12bc <__addsf3x+0x9a>
    12ba:	b0 cf       	rjmp	.-160    	; 0x121c <__addsf3+0x28>
    12bc:	93 95       	inc	r25
    12be:	88 0f       	add	r24, r24
    12c0:	08 f0       	brcs	.+2      	; 0x12c4 <__addsf3x+0xa2>
    12c2:	99 27       	eor	r25, r25
    12c4:	ee 0f       	add	r30, r30
    12c6:	97 95       	ror	r25
    12c8:	87 95       	ror	r24
    12ca:	08 95       	ret

000012cc <__fixsfdi>:
    12cc:	be e3       	ldi	r27, 0x3E	; 62
    12ce:	04 d0       	rcall	.+8      	; 0x12d8 <__fixunssfdi+0x2>
    12d0:	08 f4       	brcc	.+2      	; 0x12d4 <__fixsfdi+0x8>
    12d2:	90 e8       	ldi	r25, 0x80	; 128
    12d4:	08 95       	ret

000012d6 <__fixunssfdi>:
    12d6:	bf e3       	ldi	r27, 0x3F	; 63
    12d8:	22 27       	eor	r18, r18
    12da:	33 27       	eor	r19, r19
    12dc:	a9 01       	movw	r20, r18
    12de:	0e 94 1f 0a 	call	0x143e	; 0x143e <__fp_splitA>
    12e2:	60 f1       	brcs	.+88     	; 0x133c <__fixunssfdi+0x66>
    12e4:	9f 57       	subi	r25, 0x7F	; 127
    12e6:	48 f1       	brcs	.+82     	; 0x133a <__fixunssfdi+0x64>
    12e8:	b9 17       	cp	r27, r25
    12ea:	40 f1       	brcs	.+80     	; 0x133c <__fixunssfdi+0x66>
    12ec:	bf e3       	ldi	r27, 0x3F	; 63
    12ee:	b9 1b       	sub	r27, r25
    12f0:	99 27       	eor	r25, r25
    12f2:	b8 50       	subi	r27, 0x08	; 8
    12f4:	3a f4       	brpl	.+14     	; 0x1304 <__fixunssfdi+0x2e>
    12f6:	66 0f       	add	r22, r22
    12f8:	77 1f       	adc	r23, r23
    12fa:	88 1f       	adc	r24, r24
    12fc:	99 1f       	adc	r25, r25
    12fe:	b3 95       	inc	r27
    1300:	d2 f3       	brmi	.-12     	; 0x12f6 <__fixunssfdi+0x20>
    1302:	16 c0       	rjmp	.+44     	; 0x1330 <__fixunssfdi+0x5a>
    1304:	b8 50       	subi	r27, 0x08	; 8
    1306:	4a f0       	brmi	.+18     	; 0x131a <__fixunssfdi+0x44>
    1308:	23 2f       	mov	r18, r19
    130a:	34 2f       	mov	r19, r20
    130c:	45 2f       	mov	r20, r21
    130e:	56 2f       	mov	r21, r22
    1310:	67 2f       	mov	r22, r23
    1312:	78 2f       	mov	r23, r24
    1314:	88 27       	eor	r24, r24
    1316:	b8 50       	subi	r27, 0x08	; 8
    1318:	ba f7       	brpl	.-18     	; 0x1308 <__fixunssfdi+0x32>
    131a:	b8 5f       	subi	r27, 0xF8	; 248
    131c:	49 f0       	breq	.+18     	; 0x1330 <__fixunssfdi+0x5a>
    131e:	86 95       	lsr	r24
    1320:	77 95       	ror	r23
    1322:	67 95       	ror	r22
    1324:	57 95       	ror	r21
    1326:	47 95       	ror	r20
    1328:	37 95       	ror	r19
    132a:	27 95       	ror	r18
    132c:	ba 95       	dec	r27
    132e:	b9 f7       	brne	.-18     	; 0x131e <__fixunssfdi+0x48>
    1330:	16 f4       	brtc	.+4      	; 0x1336 <__fixunssfdi+0x60>
    1332:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <__fp_negdi>
    1336:	88 94       	clc
    1338:	08 95       	ret
    133a:	88 94       	clc
    133c:	60 e0       	ldi	r22, 0x00	; 0
    133e:	70 e0       	ldi	r23, 0x00	; 0
    1340:	cb 01       	movw	r24, r22
    1342:	08 95       	ret

00001344 <__floatunsisf>:
    1344:	e8 94       	clt
    1346:	09 c0       	rjmp	.+18     	; 0x135a <__floatsisf+0x12>

00001348 <__floatsisf>:
    1348:	97 fb       	bst	r25, 7
    134a:	3e f4       	brtc	.+14     	; 0x135a <__floatsisf+0x12>
    134c:	90 95       	com	r25
    134e:	80 95       	com	r24
    1350:	70 95       	com	r23
    1352:	61 95       	neg	r22
    1354:	7f 4f       	sbci	r23, 0xFF	; 255
    1356:	8f 4f       	sbci	r24, 0xFF	; 255
    1358:	9f 4f       	sbci	r25, 0xFF	; 255
    135a:	99 23       	and	r25, r25
    135c:	a9 f0       	breq	.+42     	; 0x1388 <__floatsisf+0x40>
    135e:	f9 2f       	mov	r31, r25
    1360:	96 e9       	ldi	r25, 0x96	; 150
    1362:	bb 27       	eor	r27, r27
    1364:	93 95       	inc	r25
    1366:	f6 95       	lsr	r31
    1368:	87 95       	ror	r24
    136a:	77 95       	ror	r23
    136c:	67 95       	ror	r22
    136e:	b7 95       	ror	r27
    1370:	f1 11       	cpse	r31, r1
    1372:	f8 cf       	rjmp	.-16     	; 0x1364 <__floatsisf+0x1c>
    1374:	fa f4       	brpl	.+62     	; 0x13b4 <__floatsisf+0x6c>
    1376:	bb 0f       	add	r27, r27
    1378:	11 f4       	brne	.+4      	; 0x137e <__floatsisf+0x36>
    137a:	60 ff       	sbrs	r22, 0
    137c:	1b c0       	rjmp	.+54     	; 0x13b4 <__floatsisf+0x6c>
    137e:	6f 5f       	subi	r22, 0xFF	; 255
    1380:	7f 4f       	sbci	r23, 0xFF	; 255
    1382:	8f 4f       	sbci	r24, 0xFF	; 255
    1384:	9f 4f       	sbci	r25, 0xFF	; 255
    1386:	16 c0       	rjmp	.+44     	; 0x13b4 <__floatsisf+0x6c>
    1388:	88 23       	and	r24, r24
    138a:	11 f0       	breq	.+4      	; 0x1390 <__floatsisf+0x48>
    138c:	96 e9       	ldi	r25, 0x96	; 150
    138e:	11 c0       	rjmp	.+34     	; 0x13b2 <__floatsisf+0x6a>
    1390:	77 23       	and	r23, r23
    1392:	21 f0       	breq	.+8      	; 0x139c <__floatsisf+0x54>
    1394:	9e e8       	ldi	r25, 0x8E	; 142
    1396:	87 2f       	mov	r24, r23
    1398:	76 2f       	mov	r23, r22
    139a:	05 c0       	rjmp	.+10     	; 0x13a6 <__floatsisf+0x5e>
    139c:	66 23       	and	r22, r22
    139e:	71 f0       	breq	.+28     	; 0x13bc <__floatsisf+0x74>
    13a0:	96 e8       	ldi	r25, 0x86	; 134
    13a2:	86 2f       	mov	r24, r22
    13a4:	70 e0       	ldi	r23, 0x00	; 0
    13a6:	60 e0       	ldi	r22, 0x00	; 0
    13a8:	2a f0       	brmi	.+10     	; 0x13b4 <__floatsisf+0x6c>
    13aa:	9a 95       	dec	r25
    13ac:	66 0f       	add	r22, r22
    13ae:	77 1f       	adc	r23, r23
    13b0:	88 1f       	adc	r24, r24
    13b2:	da f7       	brpl	.-10     	; 0x13aa <__floatsisf+0x62>
    13b4:	88 0f       	add	r24, r24
    13b6:	96 95       	lsr	r25
    13b8:	87 95       	ror	r24
    13ba:	97 f9       	bld	r25, 7
    13bc:	08 95       	ret

000013be <__fp_inf>:
    13be:	97 f9       	bld	r25, 7
    13c0:	9f 67       	ori	r25, 0x7F	; 127
    13c2:	80 e8       	ldi	r24, 0x80	; 128
    13c4:	70 e0       	ldi	r23, 0x00	; 0
    13c6:	60 e0       	ldi	r22, 0x00	; 0
    13c8:	08 95       	ret

000013ca <__fp_nan>:
    13ca:	9f ef       	ldi	r25, 0xFF	; 255
    13cc:	80 ec       	ldi	r24, 0xC0	; 192
    13ce:	08 95       	ret

000013d0 <__fp_negdi>:
    13d0:	90 95       	com	r25
    13d2:	80 95       	com	r24
    13d4:	70 95       	com	r23
    13d6:	60 95       	com	r22
    13d8:	50 95       	com	r21
    13da:	40 95       	com	r20
    13dc:	30 95       	com	r19
    13de:	21 95       	neg	r18
    13e0:	3f 4f       	sbci	r19, 0xFF	; 255
    13e2:	4f 4f       	sbci	r20, 0xFF	; 255
    13e4:	5f 4f       	sbci	r21, 0xFF	; 255
    13e6:	6f 4f       	sbci	r22, 0xFF	; 255
    13e8:	7f 4f       	sbci	r23, 0xFF	; 255
    13ea:	8f 4f       	sbci	r24, 0xFF	; 255
    13ec:	9f 4f       	sbci	r25, 0xFF	; 255
    13ee:	08 95       	ret

000013f0 <__fp_pscA>:
    13f0:	00 24       	eor	r0, r0
    13f2:	0a 94       	dec	r0
    13f4:	16 16       	cp	r1, r22
    13f6:	17 06       	cpc	r1, r23
    13f8:	18 06       	cpc	r1, r24
    13fa:	09 06       	cpc	r0, r25
    13fc:	08 95       	ret

000013fe <__fp_pscB>:
    13fe:	00 24       	eor	r0, r0
    1400:	0a 94       	dec	r0
    1402:	12 16       	cp	r1, r18
    1404:	13 06       	cpc	r1, r19
    1406:	14 06       	cpc	r1, r20
    1408:	05 06       	cpc	r0, r21
    140a:	08 95       	ret

0000140c <__fp_round>:
    140c:	09 2e       	mov	r0, r25
    140e:	03 94       	inc	r0
    1410:	00 0c       	add	r0, r0
    1412:	11 f4       	brne	.+4      	; 0x1418 <__fp_round+0xc>
    1414:	88 23       	and	r24, r24
    1416:	52 f0       	brmi	.+20     	; 0x142c <__fp_round+0x20>
    1418:	bb 0f       	add	r27, r27
    141a:	40 f4       	brcc	.+16     	; 0x142c <__fp_round+0x20>
    141c:	bf 2b       	or	r27, r31
    141e:	11 f4       	brne	.+4      	; 0x1424 <__fp_round+0x18>
    1420:	60 ff       	sbrs	r22, 0
    1422:	04 c0       	rjmp	.+8      	; 0x142c <__fp_round+0x20>
    1424:	6f 5f       	subi	r22, 0xFF	; 255
    1426:	7f 4f       	sbci	r23, 0xFF	; 255
    1428:	8f 4f       	sbci	r24, 0xFF	; 255
    142a:	9f 4f       	sbci	r25, 0xFF	; 255
    142c:	08 95       	ret

0000142e <__fp_split3>:
    142e:	57 fd       	sbrc	r21, 7
    1430:	90 58       	subi	r25, 0x80	; 128
    1432:	44 0f       	add	r20, r20
    1434:	55 1f       	adc	r21, r21
    1436:	59 f0       	breq	.+22     	; 0x144e <__fp_splitA+0x10>
    1438:	5f 3f       	cpi	r21, 0xFF	; 255
    143a:	71 f0       	breq	.+28     	; 0x1458 <__fp_splitA+0x1a>
    143c:	47 95       	ror	r20

0000143e <__fp_splitA>:
    143e:	88 0f       	add	r24, r24
    1440:	97 fb       	bst	r25, 7
    1442:	99 1f       	adc	r25, r25
    1444:	61 f0       	breq	.+24     	; 0x145e <__fp_splitA+0x20>
    1446:	9f 3f       	cpi	r25, 0xFF	; 255
    1448:	79 f0       	breq	.+30     	; 0x1468 <__fp_splitA+0x2a>
    144a:	87 95       	ror	r24
    144c:	08 95       	ret
    144e:	12 16       	cp	r1, r18
    1450:	13 06       	cpc	r1, r19
    1452:	14 06       	cpc	r1, r20
    1454:	55 1f       	adc	r21, r21
    1456:	f2 cf       	rjmp	.-28     	; 0x143c <__fp_split3+0xe>
    1458:	46 95       	lsr	r20
    145a:	f1 df       	rcall	.-30     	; 0x143e <__fp_splitA>
    145c:	08 c0       	rjmp	.+16     	; 0x146e <__fp_splitA+0x30>
    145e:	16 16       	cp	r1, r22
    1460:	17 06       	cpc	r1, r23
    1462:	18 06       	cpc	r1, r24
    1464:	99 1f       	adc	r25, r25
    1466:	f1 cf       	rjmp	.-30     	; 0x144a <__fp_splitA+0xc>
    1468:	86 95       	lsr	r24
    146a:	71 05       	cpc	r23, r1
    146c:	61 05       	cpc	r22, r1
    146e:	08 94       	sec
    1470:	08 95       	ret

00001472 <__fp_zero>:
    1472:	e8 94       	clt

00001474 <__fp_szero>:
    1474:	bb 27       	eor	r27, r27
    1476:	66 27       	eor	r22, r22
    1478:	77 27       	eor	r23, r23
    147a:	cb 01       	movw	r24, r22
    147c:	97 f9       	bld	r25, 7
    147e:	08 95       	ret

00001480 <__tablejump2__>:
    1480:	ee 0f       	add	r30, r30
    1482:	ff 1f       	adc	r31, r31
    1484:	05 90       	lpm	r0, Z+
    1486:	f4 91       	lpm	r31, Z
    1488:	e0 2d       	mov	r30, r0
    148a:	09 94       	ijmp

0000148c <__ashrdi3>:
    148c:	97 fb       	bst	r25, 7
    148e:	10 f8       	bld	r1, 0

00001490 <__lshrdi3>:
    1490:	16 94       	lsr	r1
    1492:	00 08       	sbc	r0, r0
    1494:	0f 93       	push	r16
    1496:	08 30       	cpi	r16, 0x08	; 8
    1498:	98 f0       	brcs	.+38     	; 0x14c0 <__lshrdi3+0x30>
    149a:	08 50       	subi	r16, 0x08	; 8
    149c:	23 2f       	mov	r18, r19
    149e:	34 2f       	mov	r19, r20
    14a0:	45 2f       	mov	r20, r21
    14a2:	56 2f       	mov	r21, r22
    14a4:	67 2f       	mov	r22, r23
    14a6:	78 2f       	mov	r23, r24
    14a8:	89 2f       	mov	r24, r25
    14aa:	90 2d       	mov	r25, r0
    14ac:	f4 cf       	rjmp	.-24     	; 0x1496 <__lshrdi3+0x6>
    14ae:	05 94       	asr	r0
    14b0:	97 95       	ror	r25
    14b2:	87 95       	ror	r24
    14b4:	77 95       	ror	r23
    14b6:	67 95       	ror	r22
    14b8:	57 95       	ror	r21
    14ba:	47 95       	ror	r20
    14bc:	37 95       	ror	r19
    14be:	27 95       	ror	r18
    14c0:	0a 95       	dec	r16
    14c2:	aa f7       	brpl	.-22     	; 0x14ae <__lshrdi3+0x1e>
    14c4:	0f 91       	pop	r16
    14c6:	08 95       	ret

000014c8 <_exit>:
    14c8:	f8 94       	cli

000014ca <__stop_program>:
    14ca:	ff cf       	rjmp	.-2      	; 0x14ca <__stop_program>
